
CANNode1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c64  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08002dec  08002dec  00003dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e28  08002e28  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002e28  08002e28  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002e28  08002e28  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e28  08002e28  00003e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002e2c  08002e2c  00003e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002e30  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000400c  2**0
                  CONTENTS
 10 .bss          00000088  2000000c  2000000c  0000400c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000094  20000094  0000400c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005aab  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000012bd  00000000  00000000  00009ae7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000530  00000000  00000000  0000ada8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000003c5  00000000  00000000  0000b2d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019491  00000000  00000000  0000b69d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006728  00000000  00000000  00024b2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094c11  00000000  00000000  0002b256  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000bfe67  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001398  00000000  00000000  000bfeac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000051  00000000  00000000  000c1244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002dd4 	.word	0x08002dd4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002dd4 	.word	0x08002dd4

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fa40 	bl	8000650 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f81c 	bl	800020c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f8ac 	bl	8000330 <MX_GPIO_Init>
  MX_CAN_Init();
 80001d8:	f000 f854 	bl	8000284 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan);
 80001dc:	4809      	ldr	r0, [pc, #36]	@ (8000204 <main+0x3c>)
 80001de:	f000 fc86 	bl	8000aee <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80001e2:	2102      	movs	r1, #2
 80001e4:	4807      	ldr	r0, [pc, #28]	@ (8000204 <main+0x3c>)
 80001e6:	f000 feed 	bl	8000fc4 <HAL_CAN_ActivateNotification>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  CAN_Send_Message(0x420, "DevHeads", 8);
 80001ea:	2208      	movs	r2, #8
 80001ec:	4906      	ldr	r1, [pc, #24]	@ (8000208 <main+0x40>)
 80001ee:	f44f 6084 	mov.w	r0, #1056	@ 0x420
 80001f2:	f000 f911 	bl	8000418 <CAN_Send_Message>
	  HAL_Delay(2000);
 80001f6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80001fa:	f000 fa8f 	bl	800071c <HAL_Delay>
  {
 80001fe:	bf00      	nop
 8000200:	e7f3      	b.n	80001ea <main+0x22>
 8000202:	bf00      	nop
 8000204:	20000068 	.word	0x20000068
 8000208:	08002dec 	.word	0x08002dec

0800020c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b090      	sub	sp, #64	@ 0x40
 8000210:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000212:	f107 0318 	add.w	r3, r7, #24
 8000216:	2228      	movs	r2, #40	@ 0x28
 8000218:	2100      	movs	r1, #0
 800021a:	4618      	mov	r0, r3
 800021c:	f002 fdae 	bl	8002d7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000220:	1d3b      	adds	r3, r7, #4
 8000222:	2200      	movs	r2, #0
 8000224:	601a      	str	r2, [r3, #0]
 8000226:	605a      	str	r2, [r3, #4]
 8000228:	609a      	str	r2, [r3, #8]
 800022a:	60da      	str	r2, [r3, #12]
 800022c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800022e:	2302      	movs	r3, #2
 8000230:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000232:	2301      	movs	r3, #1
 8000234:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000236:	2310      	movs	r3, #16
 8000238:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800023a:	2300      	movs	r3, #0
 800023c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800023e:	f107 0318 	add.w	r3, r7, #24
 8000242:	4618      	mov	r0, r3
 8000244:	f001 fbca 	bl	80019dc <HAL_RCC_OscConfig>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d001      	beq.n	8000252 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800024e:	f000 f913 	bl	8000478 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000252:	230f      	movs	r3, #15
 8000254:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000256:	2300      	movs	r3, #0
 8000258:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800025a:	2300      	movs	r3, #0
 800025c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800025e:	2300      	movs	r3, #0
 8000260:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000262:	2300      	movs	r3, #0
 8000264:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000266:	1d3b      	adds	r3, r7, #4
 8000268:	2100      	movs	r1, #0
 800026a:	4618      	mov	r0, r3
 800026c:	f002 fbc4 	bl	80029f8 <HAL_RCC_ClockConfig>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000276:	f000 f8ff 	bl	8000478 <Error_Handler>
  }
}
 800027a:	bf00      	nop
 800027c:	3740      	adds	r7, #64	@ 0x40
 800027e:	46bd      	mov	sp, r7
 8000280:	bd80      	pop	{r7, pc}
	...

08000284 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b08a      	sub	sp, #40	@ 0x28
 8000288:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 800028a:	4b27      	ldr	r3, [pc, #156]	@ (8000328 <MX_CAN_Init+0xa4>)
 800028c:	4a27      	ldr	r2, [pc, #156]	@ (800032c <MX_CAN_Init+0xa8>)
 800028e:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000290:	4b25      	ldr	r3, [pc, #148]	@ (8000328 <MX_CAN_Init+0xa4>)
 8000292:	2210      	movs	r2, #16
 8000294:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000296:	4b24      	ldr	r3, [pc, #144]	@ (8000328 <MX_CAN_Init+0xa4>)
 8000298:	2200      	movs	r2, #0
 800029a:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800029c:	4b22      	ldr	r3, [pc, #136]	@ (8000328 <MX_CAN_Init+0xa4>)
 800029e:	2200      	movs	r2, #0
 80002a0:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_8TQ;
 80002a2:	4b21      	ldr	r3, [pc, #132]	@ (8000328 <MX_CAN_Init+0xa4>)
 80002a4:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80002a8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80002aa:	4b1f      	ldr	r3, [pc, #124]	@ (8000328 <MX_CAN_Init+0xa4>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80002b0:	4b1d      	ldr	r3, [pc, #116]	@ (8000328 <MX_CAN_Init+0xa4>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80002b6:	4b1c      	ldr	r3, [pc, #112]	@ (8000328 <MX_CAN_Init+0xa4>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80002bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000328 <MX_CAN_Init+0xa4>)
 80002be:	2200      	movs	r2, #0
 80002c0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80002c2:	4b19      	ldr	r3, [pc, #100]	@ (8000328 <MX_CAN_Init+0xa4>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80002c8:	4b17      	ldr	r3, [pc, #92]	@ (8000328 <MX_CAN_Init+0xa4>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80002ce:	4b16      	ldr	r3, [pc, #88]	@ (8000328 <MX_CAN_Init+0xa4>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80002d4:	4814      	ldr	r0, [pc, #80]	@ (8000328 <MX_CAN_Init+0xa4>)
 80002d6:	f000 fa45 	bl	8000764 <HAL_CAN_Init>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d001      	beq.n	80002e4 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80002e0:	f000 f8ca 	bl	8000478 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80002e4:	2301      	movs	r3, #1
 80002e6:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 0;
 80002e8:	2300      	movs	r3, #0
 80002ea:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80002ec:	2300      	movs	r3, #0
 80002ee:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x0000;
 80002f0:	2300      	movs	r3, #0
 80002f2:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0x0000;
 80002f4:	2300      	movs	r3, #0
 80002f6:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x0000;
 80002f8:	2300      	movs	r3, #0
 80002fa:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 80002fc:	2300      	movs	r3, #0
 80002fe:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000300:	2300      	movs	r3, #0
 8000302:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000304:	2301      	movs	r3, #1
 8000306:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 0;
 8000308:	2300      	movs	r3, #0
 800030a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_CAN_ConfigFilter(&hcan, &canfilterconfig) != HAL_OK)
 800030c:	463b      	mov	r3, r7
 800030e:	4619      	mov	r1, r3
 8000310:	4805      	ldr	r0, [pc, #20]	@ (8000328 <MX_CAN_Init+0xa4>)
 8000312:	f000 fb22 	bl	800095a <HAL_CAN_ConfigFilter>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <MX_CAN_Init+0x9c>
   {
     Error_Handler();
 800031c:	f000 f8ac 	bl	8000478 <Error_Handler>
   }
  /* USER CODE END CAN_Init 2 */

}
 8000320:	bf00      	nop
 8000322:	3728      	adds	r7, #40	@ 0x28
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}
 8000328:	20000068 	.word	0x20000068
 800032c:	40006400 	.word	0x40006400

08000330 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b088      	sub	sp, #32
 8000334:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000336:	f107 030c 	add.w	r3, r7, #12
 800033a:	2200      	movs	r2, #0
 800033c:	601a      	str	r2, [r3, #0]
 800033e:	605a      	str	r2, [r3, #4]
 8000340:	609a      	str	r2, [r3, #8]
 8000342:	60da      	str	r2, [r3, #12]
 8000344:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000346:	4b17      	ldr	r3, [pc, #92]	@ (80003a4 <MX_GPIO_Init+0x74>)
 8000348:	695b      	ldr	r3, [r3, #20]
 800034a:	4a16      	ldr	r2, [pc, #88]	@ (80003a4 <MX_GPIO_Init+0x74>)
 800034c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000350:	6153      	str	r3, [r2, #20]
 8000352:	4b14      	ldr	r3, [pc, #80]	@ (80003a4 <MX_GPIO_Init+0x74>)
 8000354:	695b      	ldr	r3, [r3, #20]
 8000356:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800035a:	60bb      	str	r3, [r7, #8]
 800035c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800035e:	4b11      	ldr	r3, [pc, #68]	@ (80003a4 <MX_GPIO_Init+0x74>)
 8000360:	695b      	ldr	r3, [r3, #20]
 8000362:	4a10      	ldr	r2, [pc, #64]	@ (80003a4 <MX_GPIO_Init+0x74>)
 8000364:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000368:	6153      	str	r3, [r2, #20]
 800036a:	4b0e      	ldr	r3, [pc, #56]	@ (80003a4 <MX_GPIO_Init+0x74>)
 800036c:	695b      	ldr	r3, [r3, #20]
 800036e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000372:	607b      	str	r3, [r7, #4]
 8000374:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_7, GPIO_PIN_RESET);
 8000376:	2200      	movs	r2, #0
 8000378:	2181      	movs	r1, #129	@ 0x81
 800037a:	480b      	ldr	r0, [pc, #44]	@ (80003a8 <MX_GPIO_Init+0x78>)
 800037c:	f001 fafc 	bl	8001978 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_7;
 8000380:	2381      	movs	r3, #129	@ 0x81
 8000382:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000384:	2301      	movs	r3, #1
 8000386:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000388:	2300      	movs	r3, #0
 800038a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800038c:	2300      	movs	r3, #0
 800038e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000390:	f107 030c 	add.w	r3, r7, #12
 8000394:	4619      	mov	r1, r3
 8000396:	4804      	ldr	r0, [pc, #16]	@ (80003a8 <MX_GPIO_Init+0x78>)
 8000398:	f001 f97c 	bl	8001694 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800039c:	bf00      	nop
 800039e:	3720      	adds	r7, #32
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	40021000 	.word	0x40021000
 80003a8:	48000400 	.word	0x48000400

080003ac <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80003b4:	4b15      	ldr	r3, [pc, #84]	@ (800040c <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 80003b6:	4a16      	ldr	r2, [pc, #88]	@ (8000410 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 80003b8:	2100      	movs	r1, #0
 80003ba:	6878      	ldr	r0, [r7, #4]
 80003bc:	f000 fce0 	bl	8000d80 <HAL_CAN_GetRxMessage>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
	{
		Error_Handler();
 80003c6:	f000 f857 	bl	8000478 <Error_Handler>
	}

	if(RxHeader.StdId ==  0x322)	//button status of CAN button1
 80003ca:	4b11      	ldr	r3, [pc, #68]	@ (8000410 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	f240 3222 	movw	r2, #802	@ 0x322
 80003d2:	4293      	cmp	r3, r2
 80003d4:	d107      	bne.n	80003e6 <HAL_CAN_RxFifo0MsgPendingCallback+0x3a>
	{
		if(RxData[0] == 0){
 80003d6:	4b0d      	ldr	r3, [pc, #52]	@ (800040c <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 80003d8:	781b      	ldrb	r3, [r3, #0]
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d103      	bne.n	80003e6 <HAL_CAN_RxFifo0MsgPendingCallback+0x3a>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80003de:	2101      	movs	r1, #1
 80003e0:	480c      	ldr	r0, [pc, #48]	@ (8000414 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 80003e2:	f001 fae1 	bl	80019a8 <HAL_GPIO_TogglePin>
		}
	}

	if(RxHeader.StdId ==  0x422)	//button status of CAN button1
 80003e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000410 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	f240 4222 	movw	r2, #1058	@ 0x422
 80003ee:	4293      	cmp	r3, r2
 80003f0:	d107      	bne.n	8000402 <HAL_CAN_RxFifo0MsgPendingCallback+0x56>
	{
		if(RxData[0] == 0){
 80003f2:	4b06      	ldr	r3, [pc, #24]	@ (800040c <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 80003f4:	781b      	ldrb	r3, [r3, #0]
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d103      	bne.n	8000402 <HAL_CAN_RxFifo0MsgPendingCallback+0x56>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80003fa:	2180      	movs	r1, #128	@ 0x80
 80003fc:	4805      	ldr	r0, [pc, #20]	@ (8000414 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 80003fe:	f001 fad3 	bl	80019a8 <HAL_GPIO_TogglePin>
		}
	}
}
 8000402:	bf00      	nop
 8000404:	3708      	adds	r7, #8
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	2000005c 	.word	0x2000005c
 8000410:	20000040 	.word	0x20000040
 8000414:	48000400 	.word	0x48000400

08000418 <CAN_Send_Message>:

void CAN_Send_Message(uint32_t canId, uint8_t *data, uint8_t length)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b084      	sub	sp, #16
 800041c:	af00      	add	r7, sp, #0
 800041e:	60f8      	str	r0, [r7, #12]
 8000420:	60b9      	str	r1, [r7, #8]
 8000422:	4613      	mov	r3, r2
 8000424:	71fb      	strb	r3, [r7, #7]
	TxHeader.DLC = length;
 8000426:	79fb      	ldrb	r3, [r7, #7]
 8000428:	4a10      	ldr	r2, [pc, #64]	@ (800046c <CAN_Send_Message+0x54>)
 800042a:	6113      	str	r3, [r2, #16]
	TxHeader.ExtId = 0;                   // Not using extended ID
 800042c:	4b0f      	ldr	r3, [pc, #60]	@ (800046c <CAN_Send_Message+0x54>)
 800042e:	2200      	movs	r2, #0
 8000430:	605a      	str	r2, [r3, #4]
	TxHeader.IDE = CAN_ID_STD;
 8000432:	4b0e      	ldr	r3, [pc, #56]	@ (800046c <CAN_Send_Message+0x54>)
 8000434:	2200      	movs	r2, #0
 8000436:	609a      	str	r2, [r3, #8]
	TxHeader.StdId = canId;
 8000438:	4a0c      	ldr	r2, [pc, #48]	@ (800046c <CAN_Send_Message+0x54>)
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	6013      	str	r3, [r2, #0]
	TxHeader.RTR = CAN_RTR_DATA;
 800043e:	4b0b      	ldr	r3, [pc, #44]	@ (800046c <CAN_Send_Message+0x54>)
 8000440:	2200      	movs	r2, #0
 8000442:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 8000444:	4b09      	ldr	r3, [pc, #36]	@ (800046c <CAN_Send_Message+0x54>)
 8000446:	2200      	movs	r2, #0
 8000448:	751a      	strb	r2, [r3, #20]

	while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0);
 800044a:	bf00      	nop
 800044c:	4808      	ldr	r0, [pc, #32]	@ (8000470 <CAN_Send_Message+0x58>)
 800044e:	f000 fc62 	bl	8000d16 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000452:	4603      	mov	r3, r0
 8000454:	2b00      	cmp	r3, #0
 8000456:	d0f9      	beq.n	800044c <CAN_Send_Message+0x34>
	HAL_CAN_AddTxMessage(&hcan, &TxHeader, data, &TxMailbox);
 8000458:	4b06      	ldr	r3, [pc, #24]	@ (8000474 <CAN_Send_Message+0x5c>)
 800045a:	68ba      	ldr	r2, [r7, #8]
 800045c:	4903      	ldr	r1, [pc, #12]	@ (800046c <CAN_Send_Message+0x54>)
 800045e:	4804      	ldr	r0, [pc, #16]	@ (8000470 <CAN_Send_Message+0x58>)
 8000460:	f000 fb89 	bl	8000b76 <HAL_CAN_AddTxMessage>
}
 8000464:	bf00      	nop
 8000466:	3710      	adds	r7, #16
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	20000028 	.word	0x20000028
 8000470:	20000068 	.word	0x20000068
 8000474:	20000064 	.word	0x20000064

08000478 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800047c:	b672      	cpsid	i
}
 800047e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000480:	bf00      	nop
 8000482:	e7fd      	b.n	8000480 <Error_Handler+0x8>

08000484 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800048a:	4b0f      	ldr	r3, [pc, #60]	@ (80004c8 <HAL_MspInit+0x44>)
 800048c:	699b      	ldr	r3, [r3, #24]
 800048e:	4a0e      	ldr	r2, [pc, #56]	@ (80004c8 <HAL_MspInit+0x44>)
 8000490:	f043 0301 	orr.w	r3, r3, #1
 8000494:	6193      	str	r3, [r2, #24]
 8000496:	4b0c      	ldr	r3, [pc, #48]	@ (80004c8 <HAL_MspInit+0x44>)
 8000498:	699b      	ldr	r3, [r3, #24]
 800049a:	f003 0301 	and.w	r3, r3, #1
 800049e:	607b      	str	r3, [r7, #4]
 80004a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004a2:	4b09      	ldr	r3, [pc, #36]	@ (80004c8 <HAL_MspInit+0x44>)
 80004a4:	69db      	ldr	r3, [r3, #28]
 80004a6:	4a08      	ldr	r2, [pc, #32]	@ (80004c8 <HAL_MspInit+0x44>)
 80004a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004ac:	61d3      	str	r3, [r2, #28]
 80004ae:	4b06      	ldr	r3, [pc, #24]	@ (80004c8 <HAL_MspInit+0x44>)
 80004b0:	69db      	ldr	r3, [r3, #28]
 80004b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004b6:	603b      	str	r3, [r7, #0]
 80004b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ba:	bf00      	nop
 80004bc:	370c      	adds	r7, #12
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop
 80004c8:	40021000 	.word	0x40021000

080004cc <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08a      	sub	sp, #40	@ 0x28
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d4:	f107 0314 	add.w	r3, r7, #20
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
 80004dc:	605a      	str	r2, [r3, #4]
 80004de:	609a      	str	r2, [r3, #8]
 80004e0:	60da      	str	r2, [r3, #12]
 80004e2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a1c      	ldr	r2, [pc, #112]	@ (800055c <HAL_CAN_MspInit+0x90>)
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d131      	bne.n	8000552 <HAL_CAN_MspInit+0x86>
  {
    /* USER CODE BEGIN CAN_MspInit 0 */

    /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80004ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000560 <HAL_CAN_MspInit+0x94>)
 80004f0:	69db      	ldr	r3, [r3, #28]
 80004f2:	4a1b      	ldr	r2, [pc, #108]	@ (8000560 <HAL_CAN_MspInit+0x94>)
 80004f4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004f8:	61d3      	str	r3, [r2, #28]
 80004fa:	4b19      	ldr	r3, [pc, #100]	@ (8000560 <HAL_CAN_MspInit+0x94>)
 80004fc:	69db      	ldr	r3, [r3, #28]
 80004fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000502:	613b      	str	r3, [r7, #16]
 8000504:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000506:	4b16      	ldr	r3, [pc, #88]	@ (8000560 <HAL_CAN_MspInit+0x94>)
 8000508:	695b      	ldr	r3, [r3, #20]
 800050a:	4a15      	ldr	r2, [pc, #84]	@ (8000560 <HAL_CAN_MspInit+0x94>)
 800050c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000510:	6153      	str	r3, [r2, #20]
 8000512:	4b13      	ldr	r3, [pc, #76]	@ (8000560 <HAL_CAN_MspInit+0x94>)
 8000514:	695b      	ldr	r3, [r3, #20]
 8000516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800051a:	60fb      	str	r3, [r7, #12]
 800051c:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800051e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000522:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000524:	2302      	movs	r3, #2
 8000526:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000528:	2300      	movs	r3, #0
 800052a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800052c:	2303      	movs	r3, #3
 800052e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000530:	2309      	movs	r3, #9
 8000532:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000534:	f107 0314 	add.w	r3, r7, #20
 8000538:	4619      	mov	r1, r3
 800053a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800053e:	f001 f8a9 	bl	8001694 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 8000542:	2200      	movs	r2, #0
 8000544:	2100      	movs	r1, #0
 8000546:	2014      	movs	r0, #20
 8000548:	f001 f86d 	bl	8001626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 800054c:	2014      	movs	r0, #20
 800054e:	f001 f886 	bl	800165e <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN_MspInit 1 */

  }

}
 8000552:	bf00      	nop
 8000554:	3728      	adds	r7, #40	@ 0x28
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	40006400 	.word	0x40006400
 8000560:	40021000 	.word	0x40021000

08000564 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000568:	bf00      	nop
 800056a:	e7fd      	b.n	8000568 <NMI_Handler+0x4>

0800056c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000570:	bf00      	nop
 8000572:	e7fd      	b.n	8000570 <HardFault_Handler+0x4>

08000574 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000578:	bf00      	nop
 800057a:	e7fd      	b.n	8000578 <MemManage_Handler+0x4>

0800057c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000580:	bf00      	nop
 8000582:	e7fd      	b.n	8000580 <BusFault_Handler+0x4>

08000584 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000588:	bf00      	nop
 800058a:	e7fd      	b.n	8000588 <UsageFault_Handler+0x4>

0800058c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000590:	bf00      	nop
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr

0800059a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800059a:	b480      	push	{r7}
 800059c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800059e:	bf00      	nop
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr

080005a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005ac:	bf00      	nop
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr

080005b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005b6:	b580      	push	{r7, lr}
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005ba:	f000 f88f 	bl	80006dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005be:	bf00      	nop
 80005c0:	bd80      	pop	{r7, pc}
	...

080005c4 <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80005c8:	4802      	ldr	r0, [pc, #8]	@ (80005d4 <CAN_RX0_IRQHandler+0x10>)
 80005ca:	f000 fd21 	bl	8001010 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	20000068 	.word	0x20000068

080005d8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005dc:	4b06      	ldr	r3, [pc, #24]	@ (80005f8 <SystemInit+0x20>)
 80005de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005e2:	4a05      	ldr	r2, [pc, #20]	@ (80005f8 <SystemInit+0x20>)
 80005e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005ec:	bf00      	nop
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	e000ed00 	.word	0xe000ed00

080005fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000634 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000600:	f7ff ffea 	bl	80005d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000604:	480c      	ldr	r0, [pc, #48]	@ (8000638 <LoopForever+0x6>)
  ldr r1, =_edata
 8000606:	490d      	ldr	r1, [pc, #52]	@ (800063c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000608:	4a0d      	ldr	r2, [pc, #52]	@ (8000640 <LoopForever+0xe>)
  movs r3, #0
 800060a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800060c:	e002      	b.n	8000614 <LoopCopyDataInit>

0800060e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800060e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000610:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000612:	3304      	adds	r3, #4

08000614 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000614:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000616:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000618:	d3f9      	bcc.n	800060e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800061a:	4a0a      	ldr	r2, [pc, #40]	@ (8000644 <LoopForever+0x12>)
  ldr r4, =_ebss
 800061c:	4c0a      	ldr	r4, [pc, #40]	@ (8000648 <LoopForever+0x16>)
  movs r3, #0
 800061e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000620:	e001      	b.n	8000626 <LoopFillZerobss>

08000622 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000622:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000624:	3204      	adds	r2, #4

08000626 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000626:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000628:	d3fb      	bcc.n	8000622 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800062a:	f002 fbaf 	bl	8002d8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800062e:	f7ff fdcb 	bl	80001c8 <main>

08000632 <LoopForever>:

LoopForever:
    b LoopForever
 8000632:	e7fe      	b.n	8000632 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000634:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000638:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800063c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000640:	08002e30 	.word	0x08002e30
  ldr r2, =_sbss
 8000644:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000648:	20000094 	.word	0x20000094

0800064c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800064c:	e7fe      	b.n	800064c <ADC1_2_IRQHandler>
	...

08000650 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000654:	4b08      	ldr	r3, [pc, #32]	@ (8000678 <HAL_Init+0x28>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a07      	ldr	r2, [pc, #28]	@ (8000678 <HAL_Init+0x28>)
 800065a:	f043 0310 	orr.w	r3, r3, #16
 800065e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000660:	2003      	movs	r0, #3
 8000662:	f000 ffd5 	bl	8001610 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000666:	200f      	movs	r0, #15
 8000668:	f000 f808 	bl	800067c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800066c:	f7ff ff0a 	bl	8000484 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000670:	2300      	movs	r3, #0
}
 8000672:	4618      	mov	r0, r3
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40022000 	.word	0x40022000

0800067c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000684:	4b12      	ldr	r3, [pc, #72]	@ (80006d0 <HAL_InitTick+0x54>)
 8000686:	681a      	ldr	r2, [r3, #0]
 8000688:	4b12      	ldr	r3, [pc, #72]	@ (80006d4 <HAL_InitTick+0x58>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	4619      	mov	r1, r3
 800068e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000692:	fbb3 f3f1 	udiv	r3, r3, r1
 8000696:	fbb2 f3f3 	udiv	r3, r2, r3
 800069a:	4618      	mov	r0, r3
 800069c:	f000 ffed 	bl	800167a <HAL_SYSTICK_Config>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006a6:	2301      	movs	r3, #1
 80006a8:	e00e      	b.n	80006c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	2b0f      	cmp	r3, #15
 80006ae:	d80a      	bhi.n	80006c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006b0:	2200      	movs	r2, #0
 80006b2:	6879      	ldr	r1, [r7, #4]
 80006b4:	f04f 30ff 	mov.w	r0, #4294967295
 80006b8:	f000 ffb5 	bl	8001626 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006bc:	4a06      	ldr	r2, [pc, #24]	@ (80006d8 <HAL_InitTick+0x5c>)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80006c2:	2300      	movs	r3, #0
 80006c4:	e000      	b.n	80006c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006c6:	2301      	movs	r3, #1
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20000000 	.word	0x20000000
 80006d4:	20000008 	.word	0x20000008
 80006d8:	20000004 	.word	0x20000004

080006dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006e0:	4b06      	ldr	r3, [pc, #24]	@ (80006fc <HAL_IncTick+0x20>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	461a      	mov	r2, r3
 80006e6:	4b06      	ldr	r3, [pc, #24]	@ (8000700 <HAL_IncTick+0x24>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4413      	add	r3, r2
 80006ec:	4a04      	ldr	r2, [pc, #16]	@ (8000700 <HAL_IncTick+0x24>)
 80006ee:	6013      	str	r3, [r2, #0]
}
 80006f0:	bf00      	nop
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	20000008 	.word	0x20000008
 8000700:	20000090 	.word	0x20000090

08000704 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  return uwTick;  
 8000708:	4b03      	ldr	r3, [pc, #12]	@ (8000718 <HAL_GetTick+0x14>)
 800070a:	681b      	ldr	r3, [r3, #0]
}
 800070c:	4618      	mov	r0, r3
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	20000090 	.word	0x20000090

0800071c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000724:	f7ff ffee 	bl	8000704 <HAL_GetTick>
 8000728:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000734:	d005      	beq.n	8000742 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000736:	4b0a      	ldr	r3, [pc, #40]	@ (8000760 <HAL_Delay+0x44>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	461a      	mov	r2, r3
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	4413      	add	r3, r2
 8000740:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000742:	bf00      	nop
 8000744:	f7ff ffde 	bl	8000704 <HAL_GetTick>
 8000748:	4602      	mov	r2, r0
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	1ad3      	subs	r3, r2, r3
 800074e:	68fa      	ldr	r2, [r7, #12]
 8000750:	429a      	cmp	r2, r3
 8000752:	d8f7      	bhi.n	8000744 <HAL_Delay+0x28>
  {
  }
}
 8000754:	bf00      	nop
 8000756:	bf00      	nop
 8000758:	3710      	adds	r7, #16
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000008 	.word	0x20000008

08000764 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d101      	bne.n	8000776 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000772:	2301      	movs	r3, #1
 8000774:	e0ed      	b.n	8000952 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	f893 3020 	ldrb.w	r3, [r3, #32]
 800077c:	b2db      	uxtb	r3, r3
 800077e:	2b00      	cmp	r3, #0
 8000780:	d102      	bne.n	8000788 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000782:	6878      	ldr	r0, [r7, #4]
 8000784:	f7ff fea2 	bl	80004cc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	681a      	ldr	r2, [r3, #0]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f042 0201 	orr.w	r2, r2, #1
 8000796:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000798:	f7ff ffb4 	bl	8000704 <HAL_GetTick>
 800079c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800079e:	e012      	b.n	80007c6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80007a0:	f7ff ffb0 	bl	8000704 <HAL_GetTick>
 80007a4:	4602      	mov	r2, r0
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	1ad3      	subs	r3, r2, r3
 80007aa:	2b0a      	cmp	r3, #10
 80007ac:	d90b      	bls.n	80007c6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007b2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	2205      	movs	r2, #5
 80007be:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80007c2:	2301      	movs	r3, #1
 80007c4:	e0c5      	b.n	8000952 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	f003 0301 	and.w	r3, r3, #1
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d0e5      	beq.n	80007a0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	f022 0202 	bic.w	r2, r2, #2
 80007e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80007e4:	f7ff ff8e 	bl	8000704 <HAL_GetTick>
 80007e8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80007ea:	e012      	b.n	8000812 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80007ec:	f7ff ff8a 	bl	8000704 <HAL_GetTick>
 80007f0:	4602      	mov	r2, r0
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	1ad3      	subs	r3, r2, r3
 80007f6:	2b0a      	cmp	r3, #10
 80007f8:	d90b      	bls.n	8000812 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007fe:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	2205      	movs	r2, #5
 800080a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800080e:	2301      	movs	r3, #1
 8000810:	e09f      	b.n	8000952 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	685b      	ldr	r3, [r3, #4]
 8000818:	f003 0302 	and.w	r3, r3, #2
 800081c:	2b00      	cmp	r3, #0
 800081e:	d1e5      	bne.n	80007ec <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	7e1b      	ldrb	r3, [r3, #24]
 8000824:	2b01      	cmp	r3, #1
 8000826:	d108      	bne.n	800083a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	681a      	ldr	r2, [r3, #0]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	e007      	b.n	800084a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	681a      	ldr	r2, [r3, #0]
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000848:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	7e5b      	ldrb	r3, [r3, #25]
 800084e:	2b01      	cmp	r3, #1
 8000850:	d108      	bne.n	8000864 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	e007      	b.n	8000874 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	681a      	ldr	r2, [r3, #0]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000872:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	7e9b      	ldrb	r3, [r3, #26]
 8000878:	2b01      	cmp	r3, #1
 800087a:	d108      	bne.n	800088e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	681a      	ldr	r2, [r3, #0]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	f042 0220 	orr.w	r2, r2, #32
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	e007      	b.n	800089e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	681a      	ldr	r2, [r3, #0]
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f022 0220 	bic.w	r2, r2, #32
 800089c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	7edb      	ldrb	r3, [r3, #27]
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d108      	bne.n	80008b8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	681a      	ldr	r2, [r3, #0]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f022 0210 	bic.w	r2, r2, #16
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	e007      	b.n	80008c8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	f042 0210 	orr.w	r2, r2, #16
 80008c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	7f1b      	ldrb	r3, [r3, #28]
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d108      	bne.n	80008e2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	681a      	ldr	r2, [r3, #0]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	f042 0208 	orr.w	r2, r2, #8
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	e007      	b.n	80008f2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	681a      	ldr	r2, [r3, #0]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f022 0208 	bic.w	r2, r2, #8
 80008f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	7f5b      	ldrb	r3, [r3, #29]
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d108      	bne.n	800090c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f042 0204 	orr.w	r2, r2, #4
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	e007      	b.n	800091c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	f022 0204 	bic.w	r2, r2, #4
 800091a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	689a      	ldr	r2, [r3, #8]
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	68db      	ldr	r3, [r3, #12]
 8000924:	431a      	orrs	r2, r3
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	691b      	ldr	r3, [r3, #16]
 800092a:	431a      	orrs	r2, r3
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	695b      	ldr	r3, [r3, #20]
 8000930:	ea42 0103 	orr.w	r1, r2, r3
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	1e5a      	subs	r2, r3, #1
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	430a      	orrs	r2, r1
 8000940:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	2200      	movs	r2, #0
 8000946:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	2201      	movs	r2, #1
 800094c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000950:	2300      	movs	r3, #0
}
 8000952:	4618      	mov	r0, r3
 8000954:	3710      	adds	r7, #16
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}

0800095a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800095a:	b480      	push	{r7}
 800095c:	b087      	sub	sp, #28
 800095e:	af00      	add	r7, sp, #0
 8000960:	6078      	str	r0, [r7, #4]
 8000962:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000970:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000972:	7cfb      	ldrb	r3, [r7, #19]
 8000974:	2b01      	cmp	r3, #1
 8000976:	d003      	beq.n	8000980 <HAL_CAN_ConfigFilter+0x26>
 8000978:	7cfb      	ldrb	r3, [r7, #19]
 800097a:	2b02      	cmp	r3, #2
 800097c:	f040 80aa 	bne.w	8000ad4 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000986:	f043 0201 	orr.w	r2, r3, #1
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	695b      	ldr	r3, [r3, #20]
 8000994:	f003 031f 	and.w	r3, r3, #31
 8000998:	2201      	movs	r2, #1
 800099a:	fa02 f303 	lsl.w	r3, r2, r3
 800099e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	43db      	mvns	r3, r3
 80009aa:	401a      	ands	r2, r3
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	69db      	ldr	r3, [r3, #28]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d123      	bne.n	8000a02 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	43db      	mvns	r3, r3
 80009c4:	401a      	ands	r2, r3
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	68db      	ldr	r3, [r3, #12]
 80009d0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80009d8:	683a      	ldr	r2, [r7, #0]
 80009da:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80009dc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	3248      	adds	r2, #72	@ 0x48
 80009e2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	689b      	ldr	r3, [r3, #8]
 80009ea:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80009f6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80009f8:	6979      	ldr	r1, [r7, #20]
 80009fa:	3348      	adds	r3, #72	@ 0x48
 80009fc:	00db      	lsls	r3, r3, #3
 80009fe:	440b      	add	r3, r1
 8000a00:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	69db      	ldr	r3, [r3, #28]
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d122      	bne.n	8000a50 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	431a      	orrs	r2, r3
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a26:	683a      	ldr	r2, [r7, #0]
 8000a28:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000a2a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	3248      	adds	r2, #72	@ 0x48
 8000a30:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	689b      	ldr	r3, [r3, #8]
 8000a38:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	68db      	ldr	r3, [r3, #12]
 8000a3e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a44:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a46:	6979      	ldr	r1, [r7, #20]
 8000a48:	3348      	adds	r3, #72	@ 0x48
 8000a4a:	00db      	lsls	r3, r3, #3
 8000a4c:	440b      	add	r3, r1
 8000a4e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d109      	bne.n	8000a6c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	43db      	mvns	r3, r3
 8000a62:	401a      	ands	r2, r3
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000a6a:	e007      	b.n	8000a7c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	431a      	orrs	r2, r3
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	691b      	ldr	r3, [r3, #16]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d109      	bne.n	8000a98 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	43db      	mvns	r3, r3
 8000a8e:	401a      	ands	r2, r3
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000a96:	e007      	b.n	8000aa8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	431a      	orrs	r2, r3
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	6a1b      	ldr	r3, [r3, #32]
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d107      	bne.n	8000ac0 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	431a      	orrs	r2, r3
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000ac6:	f023 0201 	bic.w	r2, r3, #1
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	e006      	b.n	8000ae2 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ad8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000ae0:	2301      	movs	r3, #1
  }
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	371c      	adds	r7, #28
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr

08000aee <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b084      	sub	sp, #16
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	d12e      	bne.n	8000b60 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	2202      	movs	r2, #2
 8000b06:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f022 0201 	bic.w	r2, r2, #1
 8000b18:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000b1a:	f7ff fdf3 	bl	8000704 <HAL_GetTick>
 8000b1e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000b20:	e012      	b.n	8000b48 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b22:	f7ff fdef 	bl	8000704 <HAL_GetTick>
 8000b26:	4602      	mov	r2, r0
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	1ad3      	subs	r3, r2, r3
 8000b2c:	2b0a      	cmp	r3, #10
 8000b2e:	d90b      	bls.n	8000b48 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b34:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2205      	movs	r2, #5
 8000b40:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000b44:	2301      	movs	r3, #1
 8000b46:	e012      	b.n	8000b6e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d1e5      	bne.n	8000b22 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2200      	movs	r2, #0
 8000b5a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	e006      	b.n	8000b6e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b64:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000b6c:	2301      	movs	r3, #1
  }
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3710      	adds	r7, #16
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000b76:	b480      	push	{r7}
 8000b78:	b089      	sub	sp, #36	@ 0x24
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	60f8      	str	r0, [r7, #12]
 8000b7e:	60b9      	str	r1, [r7, #8]
 8000b80:	607a      	str	r2, [r7, #4]
 8000b82:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b8a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	689b      	ldr	r3, [r3, #8]
 8000b92:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000b94:	7ffb      	ldrb	r3, [r7, #31]
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d003      	beq.n	8000ba2 <HAL_CAN_AddTxMessage+0x2c>
 8000b9a:	7ffb      	ldrb	r3, [r7, #31]
 8000b9c:	2b02      	cmp	r3, #2
 8000b9e:	f040 80ad 	bne.w	8000cfc <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000ba2:	69bb      	ldr	r3, [r7, #24]
 8000ba4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d10a      	bne.n	8000bc2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000bac:	69bb      	ldr	r3, [r7, #24]
 8000bae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d105      	bne.n	8000bc2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000bb6:	69bb      	ldr	r3, [r7, #24]
 8000bb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	f000 8095 	beq.w	8000cec <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000bc2:	69bb      	ldr	r3, [r7, #24]
 8000bc4:	0e1b      	lsrs	r3, r3, #24
 8000bc6:	f003 0303 	and.w	r3, r3, #3
 8000bca:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000bcc:	2201      	movs	r2, #1
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	409a      	lsls	r2, r3
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000bd6:	68bb      	ldr	r3, [r7, #8]
 8000bd8:	689b      	ldr	r3, [r3, #8]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d10d      	bne.n	8000bfa <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000be8:	68f9      	ldr	r1, [r7, #12]
 8000bea:	6809      	ldr	r1, [r1, #0]
 8000bec:	431a      	orrs	r2, r3
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	3318      	adds	r3, #24
 8000bf2:	011b      	lsls	r3, r3, #4
 8000bf4:	440b      	add	r3, r1
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	e00f      	b.n	8000c1a <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c04:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c0a:	68f9      	ldr	r1, [r7, #12]
 8000c0c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000c0e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	3318      	adds	r3, #24
 8000c14:	011b      	lsls	r3, r3, #4
 8000c16:	440b      	add	r3, r1
 8000c18:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	6819      	ldr	r1, [r3, #0]
 8000c1e:	68bb      	ldr	r3, [r7, #8]
 8000c20:	691a      	ldr	r2, [r3, #16]
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	3318      	adds	r3, #24
 8000c26:	011b      	lsls	r3, r3, #4
 8000c28:	440b      	add	r3, r1
 8000c2a:	3304      	adds	r3, #4
 8000c2c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	7d1b      	ldrb	r3, [r3, #20]
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d111      	bne.n	8000c5a <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	3318      	adds	r3, #24
 8000c3e:	011b      	lsls	r3, r3, #4
 8000c40:	4413      	add	r3, r2
 8000c42:	3304      	adds	r3, #4
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	68fa      	ldr	r2, [r7, #12]
 8000c48:	6811      	ldr	r1, [r2, #0]
 8000c4a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	3318      	adds	r3, #24
 8000c52:	011b      	lsls	r3, r3, #4
 8000c54:	440b      	add	r3, r1
 8000c56:	3304      	adds	r3, #4
 8000c58:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	3307      	adds	r3, #7
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	061a      	lsls	r2, r3, #24
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	3306      	adds	r3, #6
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	041b      	lsls	r3, r3, #16
 8000c6a:	431a      	orrs	r2, r3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	3305      	adds	r3, #5
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	021b      	lsls	r3, r3, #8
 8000c74:	4313      	orrs	r3, r2
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	3204      	adds	r2, #4
 8000c7a:	7812      	ldrb	r2, [r2, #0]
 8000c7c:	4610      	mov	r0, r2
 8000c7e:	68fa      	ldr	r2, [r7, #12]
 8000c80:	6811      	ldr	r1, [r2, #0]
 8000c82:	ea43 0200 	orr.w	r2, r3, r0
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	011b      	lsls	r3, r3, #4
 8000c8a:	440b      	add	r3, r1
 8000c8c:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8000c90:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	3303      	adds	r3, #3
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	061a      	lsls	r2, r3, #24
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	3302      	adds	r3, #2
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	041b      	lsls	r3, r3, #16
 8000ca2:	431a      	orrs	r2, r3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	021b      	lsls	r3, r3, #8
 8000cac:	4313      	orrs	r3, r2
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	7812      	ldrb	r2, [r2, #0]
 8000cb2:	4610      	mov	r0, r2
 8000cb4:	68fa      	ldr	r2, [r7, #12]
 8000cb6:	6811      	ldr	r1, [r2, #0]
 8000cb8:	ea43 0200 	orr.w	r2, r3, r0
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	011b      	lsls	r3, r3, #4
 8000cc0:	440b      	add	r3, r1
 8000cc2:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8000cc6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	3318      	adds	r3, #24
 8000cd0:	011b      	lsls	r3, r3, #4
 8000cd2:	4413      	add	r3, r2
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	68fa      	ldr	r2, [r7, #12]
 8000cd8:	6811      	ldr	r1, [r2, #0]
 8000cda:	f043 0201 	orr.w	r2, r3, #1
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	3318      	adds	r3, #24
 8000ce2:	011b      	lsls	r3, r3, #4
 8000ce4:	440b      	add	r3, r1
 8000ce6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	e00e      	b.n	8000d0a <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cf0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	e006      	b.n	8000d0a <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d00:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000d08:	2301      	movs	r3, #1
  }
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3724      	adds	r7, #36	@ 0x24
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr

08000d16 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8000d16:	b480      	push	{r7}
 8000d18:	b085      	sub	sp, #20
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d28:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8000d2a:	7afb      	ldrb	r3, [r7, #11]
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d002      	beq.n	8000d36 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8000d30:	7afb      	ldrb	r3, [r7, #11]
 8000d32:	2b02      	cmp	r3, #2
 8000d34:	d11d      	bne.n	8000d72 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	689b      	ldr	r3, [r3, #8]
 8000d3c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d002      	beq.n	8000d4a <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	3301      	adds	r3, #1
 8000d48:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	689b      	ldr	r3, [r3, #8]
 8000d50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d002      	beq.n	8000d5e <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d002      	beq.n	8000d72 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8000d72:	68fb      	ldr	r3, [r7, #12]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3714      	adds	r7, #20
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000d80:	b480      	push	{r7}
 8000d82:	b087      	sub	sp, #28
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
 8000d8c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d94:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000d96:	7dfb      	ldrb	r3, [r7, #23]
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d003      	beq.n	8000da4 <HAL_CAN_GetRxMessage+0x24>
 8000d9c:	7dfb      	ldrb	r3, [r7, #23]
 8000d9e:	2b02      	cmp	r3, #2
 8000da0:	f040 8103 	bne.w	8000faa <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d10e      	bne.n	8000dc8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	f003 0303 	and.w	r3, r3, #3
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d116      	bne.n	8000de6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dbc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	e0f7      	b.n	8000fb8 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	691b      	ldr	r3, [r3, #16]
 8000dce:	f003 0303 	and.w	r3, r3, #3
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d107      	bne.n	8000de6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dda:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
 8000de4:	e0e8      	b.n	8000fb8 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	68bb      	ldr	r3, [r7, #8]
 8000dec:	331b      	adds	r3, #27
 8000dee:	011b      	lsls	r3, r3, #4
 8000df0:	4413      	add	r3, r2
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f003 0204 	and.w	r2, r3, #4
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d10c      	bne.n	8000e1e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	331b      	adds	r3, #27
 8000e0c:	011b      	lsls	r3, r3, #4
 8000e0e:	4413      	add	r3, r2
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	0d5b      	lsrs	r3, r3, #21
 8000e14:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	e00b      	b.n	8000e36 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	331b      	adds	r3, #27
 8000e26:	011b      	lsls	r3, r3, #4
 8000e28:	4413      	add	r3, r2
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	08db      	lsrs	r3, r3, #3
 8000e2e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	331b      	adds	r3, #27
 8000e3e:	011b      	lsls	r3, r3, #4
 8000e40:	4413      	add	r3, r2
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f003 0202 	and.w	r2, r3, #2
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	331b      	adds	r3, #27
 8000e54:	011b      	lsls	r3, r3, #4
 8000e56:	4413      	add	r3, r2
 8000e58:	3304      	adds	r3, #4
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f003 0308 	and.w	r3, r3, #8
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d003      	beq.n	8000e6c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2208      	movs	r2, #8
 8000e68:	611a      	str	r2, [r3, #16]
 8000e6a:	e00b      	b.n	8000e84 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	331b      	adds	r3, #27
 8000e74:	011b      	lsls	r3, r3, #4
 8000e76:	4413      	add	r3, r2
 8000e78:	3304      	adds	r3, #4
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f003 020f 	and.w	r2, r3, #15
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	331b      	adds	r3, #27
 8000e8c:	011b      	lsls	r3, r3, #4
 8000e8e:	4413      	add	r3, r2
 8000e90:	3304      	adds	r3, #4
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	0a1b      	lsrs	r3, r3, #8
 8000e96:	b2da      	uxtb	r2, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	331b      	adds	r3, #27
 8000ea4:	011b      	lsls	r3, r3, #4
 8000ea6:	4413      	add	r3, r2
 8000ea8:	3304      	adds	r3, #4
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	0c1b      	lsrs	r3, r3, #16
 8000eae:	b29a      	uxth	r2, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	011b      	lsls	r3, r3, #4
 8000ebc:	4413      	add	r3, r2
 8000ebe:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	b2da      	uxtb	r2, r3
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	011b      	lsls	r3, r3, #4
 8000ed2:	4413      	add	r3, r2
 8000ed4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	0a1a      	lsrs	r2, r3, #8
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	b2d2      	uxtb	r2, r2
 8000ee2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	011b      	lsls	r3, r3, #4
 8000eec:	4413      	add	r3, r2
 8000eee:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	0c1a      	lsrs	r2, r3, #16
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	3302      	adds	r3, #2
 8000efa:	b2d2      	uxtb	r2, r2
 8000efc:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	011b      	lsls	r3, r3, #4
 8000f06:	4413      	add	r3, r2
 8000f08:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	0e1a      	lsrs	r2, r3, #24
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	3303      	adds	r3, #3
 8000f14:	b2d2      	uxtb	r2, r2
 8000f16:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	011b      	lsls	r3, r3, #4
 8000f20:	4413      	add	r3, r2
 8000f22:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	3304      	adds	r3, #4
 8000f2c:	b2d2      	uxtb	r2, r2
 8000f2e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	011b      	lsls	r3, r3, #4
 8000f38:	4413      	add	r3, r2
 8000f3a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	0a1a      	lsrs	r2, r3, #8
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	3305      	adds	r3, #5
 8000f46:	b2d2      	uxtb	r2, r2
 8000f48:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	011b      	lsls	r3, r3, #4
 8000f52:	4413      	add	r3, r2
 8000f54:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	0c1a      	lsrs	r2, r3, #16
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	3306      	adds	r3, #6
 8000f60:	b2d2      	uxtb	r2, r2
 8000f62:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	011b      	lsls	r3, r3, #4
 8000f6c:	4413      	add	r3, r2
 8000f6e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	0e1a      	lsrs	r2, r3, #24
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	3307      	adds	r3, #7
 8000f7a:	b2d2      	uxtb	r2, r2
 8000f7c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d108      	bne.n	8000f96 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	68da      	ldr	r2, [r3, #12]
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f042 0220 	orr.w	r2, r2, #32
 8000f92:	60da      	str	r2, [r3, #12]
 8000f94:	e007      	b.n	8000fa6 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	691a      	ldr	r2, [r3, #16]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f042 0220 	orr.w	r2, r2, #32
 8000fa4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	e006      	b.n	8000fb8 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fae:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
  }
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	371c      	adds	r7, #28
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fd4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000fd6:	7bfb      	ldrb	r3, [r7, #15]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d002      	beq.n	8000fe2 <HAL_CAN_ActivateNotification+0x1e>
 8000fdc:	7bfb      	ldrb	r3, [r7, #15]
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d109      	bne.n	8000ff6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	6959      	ldr	r1, [r3, #20]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	683a      	ldr	r2, [r7, #0]
 8000fee:	430a      	orrs	r2, r1
 8000ff0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	e006      	b.n	8001004 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ffa:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
  }
}
 8001004:	4618      	mov	r0, r3
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b08a      	sub	sp, #40	@ 0x28
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001018:	2300      	movs	r3, #0
 800101a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	695b      	ldr	r3, [r3, #20]
 8001022:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	68db      	ldr	r3, [r3, #12]
 800103a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	691b      	ldr	r3, [r3, #16]
 8001042:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	699b      	ldr	r3, [r3, #24]
 800104a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800104c:	6a3b      	ldr	r3, [r7, #32]
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	2b00      	cmp	r3, #0
 8001054:	d07c      	beq.n	8001150 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	f003 0301 	and.w	r3, r3, #1
 800105c:	2b00      	cmp	r3, #0
 800105e:	d023      	beq.n	80010a8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2201      	movs	r2, #1
 8001066:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	f003 0302 	and.w	r3, r3, #2
 800106e:	2b00      	cmp	r3, #0
 8001070:	d003      	beq.n	800107a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f000 f983 	bl	800137e <HAL_CAN_TxMailbox0CompleteCallback>
 8001078:	e016      	b.n	80010a8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	f003 0304 	and.w	r3, r3, #4
 8001080:	2b00      	cmp	r3, #0
 8001082:	d004      	beq.n	800108e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001086:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800108a:	627b      	str	r3, [r7, #36]	@ 0x24
 800108c:	e00c      	b.n	80010a8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	f003 0308 	and.w	r3, r3, #8
 8001094:	2b00      	cmp	r3, #0
 8001096:	d004      	beq.n	80010a2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800109a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800109e:	627b      	str	r3, [r7, #36]	@ 0x24
 80010a0:	e002      	b.n	80010a8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f000 f989 	bl	80013ba <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d024      	beq.n	80010fc <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010ba:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d003      	beq.n	80010ce <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f000 f963 	bl	8001392 <HAL_CAN_TxMailbox1CompleteCallback>
 80010cc:	e016      	b.n	80010fc <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d004      	beq.n	80010e2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80010d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010da:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80010de:	627b      	str	r3, [r7, #36]	@ 0x24
 80010e0:	e00c      	b.n	80010fc <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d004      	beq.n	80010f6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80010ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80010f4:	e002      	b.n	80010fc <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f000 f969 	bl	80013ce <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d024      	beq.n	8001150 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800110e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d003      	beq.n	8001122 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f000 f943 	bl	80013a6 <HAL_CAN_TxMailbox2CompleteCallback>
 8001120:	e016      	b.n	8001150 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d004      	beq.n	8001136 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800112c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800112e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001132:	627b      	str	r3, [r7, #36]	@ 0x24
 8001134:	e00c      	b.n	8001150 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d004      	beq.n	800114a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001142:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001146:	627b      	str	r3, [r7, #36]	@ 0x24
 8001148:	e002      	b.n	8001150 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f000 f949 	bl	80013e2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001150:	6a3b      	ldr	r3, [r7, #32]
 8001152:	f003 0308 	and.w	r3, r3, #8
 8001156:	2b00      	cmp	r3, #0
 8001158:	d00c      	beq.n	8001174 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	f003 0310 	and.w	r3, r3, #16
 8001160:	2b00      	cmp	r3, #0
 8001162:	d007      	beq.n	8001174 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001166:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800116a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2210      	movs	r2, #16
 8001172:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001174:	6a3b      	ldr	r3, [r7, #32]
 8001176:	f003 0304 	and.w	r3, r3, #4
 800117a:	2b00      	cmp	r3, #0
 800117c:	d00b      	beq.n	8001196 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	f003 0308 	and.w	r3, r3, #8
 8001184:	2b00      	cmp	r3, #0
 8001186:	d006      	beq.n	8001196 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2208      	movs	r2, #8
 800118e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f000 f930 	bl	80013f6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001196:	6a3b      	ldr	r3, [r7, #32]
 8001198:	f003 0302 	and.w	r3, r3, #2
 800119c:	2b00      	cmp	r3, #0
 800119e:	d009      	beq.n	80011b4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	f003 0303 	and.w	r3, r3, #3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d002      	beq.n	80011b4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f7ff f8fc 	bl	80003ac <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80011b4:	6a3b      	ldr	r3, [r7, #32]
 80011b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d00c      	beq.n	80011d8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	f003 0310 	and.w	r3, r3, #16
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d007      	beq.n	80011d8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80011c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011ce:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2210      	movs	r2, #16
 80011d6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80011d8:	6a3b      	ldr	r3, [r7, #32]
 80011da:	f003 0320 	and.w	r3, r3, #32
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d00b      	beq.n	80011fa <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	f003 0308 	and.w	r3, r3, #8
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d006      	beq.n	80011fa <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2208      	movs	r2, #8
 80011f2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f000 f912 	bl	800141e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80011fa:	6a3b      	ldr	r3, [r7, #32]
 80011fc:	f003 0310 	and.w	r3, r3, #16
 8001200:	2b00      	cmp	r3, #0
 8001202:	d009      	beq.n	8001218 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	691b      	ldr	r3, [r3, #16]
 800120a:	f003 0303 	and.w	r3, r3, #3
 800120e:	2b00      	cmp	r3, #0
 8001210:	d002      	beq.n	8001218 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f000 f8f9 	bl	800140a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001218:	6a3b      	ldr	r3, [r7, #32]
 800121a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d00b      	beq.n	800123a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	f003 0310 	and.w	r3, r3, #16
 8001228:	2b00      	cmp	r3, #0
 800122a:	d006      	beq.n	800123a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2210      	movs	r2, #16
 8001232:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f000 f8fc 	bl	8001432 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800123a:	6a3b      	ldr	r3, [r7, #32]
 800123c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d00b      	beq.n	800125c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	f003 0308 	and.w	r3, r3, #8
 800124a:	2b00      	cmp	r3, #0
 800124c:	d006      	beq.n	800125c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2208      	movs	r2, #8
 8001254:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f000 f8f5 	bl	8001446 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800125c:	6a3b      	ldr	r3, [r7, #32]
 800125e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d07b      	beq.n	800135e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	f003 0304 	and.w	r3, r3, #4
 800126c:	2b00      	cmp	r3, #0
 800126e:	d072      	beq.n	8001356 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001270:	6a3b      	ldr	r3, [r7, #32]
 8001272:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001276:	2b00      	cmp	r3, #0
 8001278:	d008      	beq.n	800128c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001280:	2b00      	cmp	r3, #0
 8001282:	d003      	beq.n	800128c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001286:	f043 0301 	orr.w	r3, r3, #1
 800128a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800128c:	6a3b      	ldr	r3, [r7, #32]
 800128e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001292:	2b00      	cmp	r3, #0
 8001294:	d008      	beq.n	80012a8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800129c:	2b00      	cmp	r3, #0
 800129e:	d003      	beq.n	80012a8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80012a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012a2:	f043 0302 	orr.w	r3, r3, #2
 80012a6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80012a8:	6a3b      	ldr	r3, [r7, #32]
 80012aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d008      	beq.n	80012c4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d003      	beq.n	80012c4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80012bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012be:	f043 0304 	orr.w	r3, r3, #4
 80012c2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80012c4:	6a3b      	ldr	r3, [r7, #32]
 80012c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d043      	beq.n	8001356 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d03e      	beq.n	8001356 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80012de:	2b60      	cmp	r3, #96	@ 0x60
 80012e0:	d02b      	beq.n	800133a <HAL_CAN_IRQHandler+0x32a>
 80012e2:	2b60      	cmp	r3, #96	@ 0x60
 80012e4:	d82e      	bhi.n	8001344 <HAL_CAN_IRQHandler+0x334>
 80012e6:	2b50      	cmp	r3, #80	@ 0x50
 80012e8:	d022      	beq.n	8001330 <HAL_CAN_IRQHandler+0x320>
 80012ea:	2b50      	cmp	r3, #80	@ 0x50
 80012ec:	d82a      	bhi.n	8001344 <HAL_CAN_IRQHandler+0x334>
 80012ee:	2b40      	cmp	r3, #64	@ 0x40
 80012f0:	d019      	beq.n	8001326 <HAL_CAN_IRQHandler+0x316>
 80012f2:	2b40      	cmp	r3, #64	@ 0x40
 80012f4:	d826      	bhi.n	8001344 <HAL_CAN_IRQHandler+0x334>
 80012f6:	2b30      	cmp	r3, #48	@ 0x30
 80012f8:	d010      	beq.n	800131c <HAL_CAN_IRQHandler+0x30c>
 80012fa:	2b30      	cmp	r3, #48	@ 0x30
 80012fc:	d822      	bhi.n	8001344 <HAL_CAN_IRQHandler+0x334>
 80012fe:	2b10      	cmp	r3, #16
 8001300:	d002      	beq.n	8001308 <HAL_CAN_IRQHandler+0x2f8>
 8001302:	2b20      	cmp	r3, #32
 8001304:	d005      	beq.n	8001312 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001306:	e01d      	b.n	8001344 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800130a:	f043 0308 	orr.w	r3, r3, #8
 800130e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001310:	e019      	b.n	8001346 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001314:	f043 0310 	orr.w	r3, r3, #16
 8001318:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800131a:	e014      	b.n	8001346 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800131c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800131e:	f043 0320 	orr.w	r3, r3, #32
 8001322:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001324:	e00f      	b.n	8001346 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001328:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800132c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800132e:	e00a      	b.n	8001346 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001332:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001336:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001338:	e005      	b.n	8001346 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800133a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800133c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001340:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001342:	e000      	b.n	8001346 <HAL_CAN_IRQHandler+0x336>
            break;
 8001344:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	699a      	ldr	r2, [r3, #24]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001354:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	2204      	movs	r2, #4
 800135c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800135e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001360:	2b00      	cmp	r3, #0
 8001362:	d008      	beq.n	8001376 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800136a:	431a      	orrs	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f000 f872 	bl	800145a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001376:	bf00      	nop
 8001378:	3728      	adds	r7, #40	@ 0x28
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800137e:	b480      	push	{r7}
 8001380:	b083      	sub	sp, #12
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001386:	bf00      	nop
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001392:	b480      	push	{r7}
 8001394:	b083      	sub	sp, #12
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800139a:	bf00      	nop
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80013a6:	b480      	push	{r7}
 80013a8:	b083      	sub	sp, #12
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr

080013ba <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80013ba:	b480      	push	{r7}
 80013bc:	b083      	sub	sp, #12
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr

080013ce <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80013ce:	b480      	push	{r7}
 80013d0:	b083      	sub	sp, #12
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80013e2:	b480      	push	{r7}
 80013e4:	b083      	sub	sp, #12
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80013ea:	bf00      	nop
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr

080013f6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80013f6:	b480      	push	{r7}
 80013f8:	b083      	sub	sp, #12
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr

0800140a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800140a:	b480      	push	{r7}
 800140c:	b083      	sub	sp, #12
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800141e:	b480      	push	{r7}
 8001420:	b083      	sub	sp, #12
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001432:	b480      	push	{r7}
 8001434:	b083      	sub	sp, #12
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800143a:	bf00      	nop
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001446:	b480      	push	{r7}
 8001448:	b083      	sub	sp, #12
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800145a:	b480      	push	{r7}
 800145c:	b083      	sub	sp, #12
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
	...

08001470 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f003 0307 	and.w	r3, r3, #7
 800147e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001480:	4b0c      	ldr	r3, [pc, #48]	@ (80014b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001486:	68ba      	ldr	r2, [r7, #8]
 8001488:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800148c:	4013      	ands	r3, r2
 800148e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001498:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800149c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014a2:	4a04      	ldr	r2, [pc, #16]	@ (80014b4 <__NVIC_SetPriorityGrouping+0x44>)
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	60d3      	str	r3, [r2, #12]
}
 80014a8:	bf00      	nop
 80014aa:	3714      	adds	r7, #20
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	e000ed00 	.word	0xe000ed00

080014b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014bc:	4b04      	ldr	r3, [pc, #16]	@ (80014d0 <__NVIC_GetPriorityGrouping+0x18>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	0a1b      	lsrs	r3, r3, #8
 80014c2:	f003 0307 	and.w	r3, r3, #7
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	e000ed00 	.word	0xe000ed00

080014d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	db0b      	blt.n	80014fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	f003 021f 	and.w	r2, r3, #31
 80014ec:	4907      	ldr	r1, [pc, #28]	@ (800150c <__NVIC_EnableIRQ+0x38>)
 80014ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f2:	095b      	lsrs	r3, r3, #5
 80014f4:	2001      	movs	r0, #1
 80014f6:	fa00 f202 	lsl.w	r2, r0, r2
 80014fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014fe:	bf00      	nop
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	e000e100 	.word	0xe000e100

08001510 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	6039      	str	r1, [r7, #0]
 800151a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800151c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001520:	2b00      	cmp	r3, #0
 8001522:	db0a      	blt.n	800153a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	b2da      	uxtb	r2, r3
 8001528:	490c      	ldr	r1, [pc, #48]	@ (800155c <__NVIC_SetPriority+0x4c>)
 800152a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152e:	0112      	lsls	r2, r2, #4
 8001530:	b2d2      	uxtb	r2, r2
 8001532:	440b      	add	r3, r1
 8001534:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001538:	e00a      	b.n	8001550 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	b2da      	uxtb	r2, r3
 800153e:	4908      	ldr	r1, [pc, #32]	@ (8001560 <__NVIC_SetPriority+0x50>)
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	f003 030f 	and.w	r3, r3, #15
 8001546:	3b04      	subs	r3, #4
 8001548:	0112      	lsls	r2, r2, #4
 800154a:	b2d2      	uxtb	r2, r2
 800154c:	440b      	add	r3, r1
 800154e:	761a      	strb	r2, [r3, #24]
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	e000e100 	.word	0xe000e100
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001564:	b480      	push	{r7}
 8001566:	b089      	sub	sp, #36	@ 0x24
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	f1c3 0307 	rsb	r3, r3, #7
 800157e:	2b04      	cmp	r3, #4
 8001580:	bf28      	it	cs
 8001582:	2304      	movcs	r3, #4
 8001584:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	3304      	adds	r3, #4
 800158a:	2b06      	cmp	r3, #6
 800158c:	d902      	bls.n	8001594 <NVIC_EncodePriority+0x30>
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	3b03      	subs	r3, #3
 8001592:	e000      	b.n	8001596 <NVIC_EncodePriority+0x32>
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001598:	f04f 32ff 	mov.w	r2, #4294967295
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	43da      	mvns	r2, r3
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	401a      	ands	r2, r3
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015ac:	f04f 31ff 	mov.w	r1, #4294967295
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	fa01 f303 	lsl.w	r3, r1, r3
 80015b6:	43d9      	mvns	r1, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015bc:	4313      	orrs	r3, r2
         );
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3724      	adds	r7, #36	@ 0x24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
	...

080015cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3b01      	subs	r3, #1
 80015d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015dc:	d301      	bcc.n	80015e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015de:	2301      	movs	r3, #1
 80015e0:	e00f      	b.n	8001602 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015e2:	4a0a      	ldr	r2, [pc, #40]	@ (800160c <SysTick_Config+0x40>)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3b01      	subs	r3, #1
 80015e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ea:	210f      	movs	r1, #15
 80015ec:	f04f 30ff 	mov.w	r0, #4294967295
 80015f0:	f7ff ff8e 	bl	8001510 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015f4:	4b05      	ldr	r3, [pc, #20]	@ (800160c <SysTick_Config+0x40>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015fa:	4b04      	ldr	r3, [pc, #16]	@ (800160c <SysTick_Config+0x40>)
 80015fc:	2207      	movs	r2, #7
 80015fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	e000e010 	.word	0xe000e010

08001610 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f7ff ff29 	bl	8001470 <__NVIC_SetPriorityGrouping>
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b086      	sub	sp, #24
 800162a:	af00      	add	r7, sp, #0
 800162c:	4603      	mov	r3, r0
 800162e:	60b9      	str	r1, [r7, #8]
 8001630:	607a      	str	r2, [r7, #4]
 8001632:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001634:	2300      	movs	r3, #0
 8001636:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001638:	f7ff ff3e 	bl	80014b8 <__NVIC_GetPriorityGrouping>
 800163c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	68b9      	ldr	r1, [r7, #8]
 8001642:	6978      	ldr	r0, [r7, #20]
 8001644:	f7ff ff8e 	bl	8001564 <NVIC_EncodePriority>
 8001648:	4602      	mov	r2, r0
 800164a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800164e:	4611      	mov	r1, r2
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff ff5d 	bl	8001510 <__NVIC_SetPriority>
}
 8001656:	bf00      	nop
 8001658:	3718      	adds	r7, #24
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	b082      	sub	sp, #8
 8001662:	af00      	add	r7, sp, #0
 8001664:	4603      	mov	r3, r0
 8001666:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff ff31 	bl	80014d4 <__NVIC_EnableIRQ>
}
 8001672:	bf00      	nop
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	b082      	sub	sp, #8
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f7ff ffa2 	bl	80015cc <SysTick_Config>
 8001688:	4603      	mov	r3, r0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
	...

08001694 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001694:	b480      	push	{r7}
 8001696:	b087      	sub	sp, #28
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800169e:	2300      	movs	r3, #0
 80016a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016a2:	e14e      	b.n	8001942 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	2101      	movs	r1, #1
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	fa01 f303 	lsl.w	r3, r1, r3
 80016b0:	4013      	ands	r3, r2
 80016b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	f000 8140 	beq.w	800193c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f003 0303 	and.w	r3, r3, #3
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d005      	beq.n	80016d4 <HAL_GPIO_Init+0x40>
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f003 0303 	and.w	r3, r3, #3
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d130      	bne.n	8001736 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	2203      	movs	r2, #3
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	43db      	mvns	r3, r3
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	4013      	ands	r3, r2
 80016ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	68da      	ldr	r2, [r3, #12]
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800170a:	2201      	movs	r2, #1
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	43db      	mvns	r3, r3
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	4013      	ands	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	091b      	lsrs	r3, r3, #4
 8001720:	f003 0201 	and.w	r2, r3, #1
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	4313      	orrs	r3, r2
 800172e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f003 0303 	and.w	r3, r3, #3
 800173e:	2b03      	cmp	r3, #3
 8001740:	d017      	beq.n	8001772 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	2203      	movs	r2, #3
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	43db      	mvns	r3, r3
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	4013      	ands	r3, r2
 8001758:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	689a      	ldr	r2, [r3, #8]
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	4313      	orrs	r3, r2
 800176a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f003 0303 	and.w	r3, r3, #3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d123      	bne.n	80017c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	08da      	lsrs	r2, r3, #3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	3208      	adds	r2, #8
 8001786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800178a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	f003 0307 	and.w	r3, r3, #7
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	220f      	movs	r2, #15
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	43db      	mvns	r3, r3
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	4013      	ands	r3, r2
 80017a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	691a      	ldr	r2, [r3, #16]
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	f003 0307 	and.w	r3, r3, #7
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	08da      	lsrs	r2, r3, #3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	3208      	adds	r2, #8
 80017c0:	6939      	ldr	r1, [r7, #16]
 80017c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	2203      	movs	r2, #3
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	43db      	mvns	r3, r3
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	4013      	ands	r3, r2
 80017dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f003 0203 	and.w	r2, r3, #3
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	fa02 f303 	lsl.w	r3, r2, r3
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001802:	2b00      	cmp	r3, #0
 8001804:	f000 809a 	beq.w	800193c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001808:	4b55      	ldr	r3, [pc, #340]	@ (8001960 <HAL_GPIO_Init+0x2cc>)
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	4a54      	ldr	r2, [pc, #336]	@ (8001960 <HAL_GPIO_Init+0x2cc>)
 800180e:	f043 0301 	orr.w	r3, r3, #1
 8001812:	6193      	str	r3, [r2, #24]
 8001814:	4b52      	ldr	r3, [pc, #328]	@ (8001960 <HAL_GPIO_Init+0x2cc>)
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	f003 0301 	and.w	r3, r3, #1
 800181c:	60bb      	str	r3, [r7, #8]
 800181e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001820:	4a50      	ldr	r2, [pc, #320]	@ (8001964 <HAL_GPIO_Init+0x2d0>)
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	089b      	lsrs	r3, r3, #2
 8001826:	3302      	adds	r3, #2
 8001828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800182c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	f003 0303 	and.w	r3, r3, #3
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	220f      	movs	r2, #15
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	43db      	mvns	r3, r3
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	4013      	ands	r3, r2
 8001842:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800184a:	d013      	beq.n	8001874 <HAL_GPIO_Init+0x1e0>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4a46      	ldr	r2, [pc, #280]	@ (8001968 <HAL_GPIO_Init+0x2d4>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d00d      	beq.n	8001870 <HAL_GPIO_Init+0x1dc>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4a45      	ldr	r2, [pc, #276]	@ (800196c <HAL_GPIO_Init+0x2d8>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d007      	beq.n	800186c <HAL_GPIO_Init+0x1d8>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4a44      	ldr	r2, [pc, #272]	@ (8001970 <HAL_GPIO_Init+0x2dc>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d101      	bne.n	8001868 <HAL_GPIO_Init+0x1d4>
 8001864:	2303      	movs	r3, #3
 8001866:	e006      	b.n	8001876 <HAL_GPIO_Init+0x1e2>
 8001868:	2305      	movs	r3, #5
 800186a:	e004      	b.n	8001876 <HAL_GPIO_Init+0x1e2>
 800186c:	2302      	movs	r3, #2
 800186e:	e002      	b.n	8001876 <HAL_GPIO_Init+0x1e2>
 8001870:	2301      	movs	r3, #1
 8001872:	e000      	b.n	8001876 <HAL_GPIO_Init+0x1e2>
 8001874:	2300      	movs	r3, #0
 8001876:	697a      	ldr	r2, [r7, #20]
 8001878:	f002 0203 	and.w	r2, r2, #3
 800187c:	0092      	lsls	r2, r2, #2
 800187e:	4093      	lsls	r3, r2
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	4313      	orrs	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001886:	4937      	ldr	r1, [pc, #220]	@ (8001964 <HAL_GPIO_Init+0x2d0>)
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	089b      	lsrs	r3, r3, #2
 800188c:	3302      	adds	r3, #2
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001894:	4b37      	ldr	r3, [pc, #220]	@ (8001974 <HAL_GPIO_Init+0x2e0>)
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	43db      	mvns	r3, r3
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	4013      	ands	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d003      	beq.n	80018b8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80018b8:	4a2e      	ldr	r2, [pc, #184]	@ (8001974 <HAL_GPIO_Init+0x2e0>)
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018be:	4b2d      	ldr	r3, [pc, #180]	@ (8001974 <HAL_GPIO_Init+0x2e0>)
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	43db      	mvns	r3, r3
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	4013      	ands	r3, r2
 80018cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d003      	beq.n	80018e2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	4313      	orrs	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80018e2:	4a24      	ldr	r2, [pc, #144]	@ (8001974 <HAL_GPIO_Init+0x2e0>)
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018e8:	4b22      	ldr	r3, [pc, #136]	@ (8001974 <HAL_GPIO_Init+0x2e0>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	43db      	mvns	r3, r3
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	4013      	ands	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d003      	beq.n	800190c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	4313      	orrs	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800190c:	4a19      	ldr	r2, [pc, #100]	@ (8001974 <HAL_GPIO_Init+0x2e0>)
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001912:	4b18      	ldr	r3, [pc, #96]	@ (8001974 <HAL_GPIO_Init+0x2e0>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	43db      	mvns	r3, r3
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	4013      	ands	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d003      	beq.n	8001936 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	4313      	orrs	r3, r2
 8001934:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001936:	4a0f      	ldr	r2, [pc, #60]	@ (8001974 <HAL_GPIO_Init+0x2e0>)
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	3301      	adds	r3, #1
 8001940:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	fa22 f303 	lsr.w	r3, r2, r3
 800194c:	2b00      	cmp	r3, #0
 800194e:	f47f aea9 	bne.w	80016a4 <HAL_GPIO_Init+0x10>
  }
}
 8001952:	bf00      	nop
 8001954:	bf00      	nop
 8001956:	371c      	adds	r7, #28
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	40021000 	.word	0x40021000
 8001964:	40010000 	.word	0x40010000
 8001968:	48000400 	.word	0x48000400
 800196c:	48000800 	.word	0x48000800
 8001970:	48000c00 	.word	0x48000c00
 8001974:	40010400 	.word	0x40010400

08001978 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	460b      	mov	r3, r1
 8001982:	807b      	strh	r3, [r7, #2]
 8001984:	4613      	mov	r3, r2
 8001986:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001988:	787b      	ldrb	r3, [r7, #1]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d003      	beq.n	8001996 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800198e:	887a      	ldrh	r2, [r7, #2]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001994:	e002      	b.n	800199c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001996:	887a      	ldrh	r2, [r7, #2]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	460b      	mov	r3, r1
 80019b2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	695b      	ldr	r3, [r3, #20]
 80019b8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019ba:	887a      	ldrh	r2, [r7, #2]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	4013      	ands	r3, r2
 80019c0:	041a      	lsls	r2, r3, #16
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	43d9      	mvns	r1, r3
 80019c6:	887b      	ldrh	r3, [r7, #2]
 80019c8:	400b      	ands	r3, r1
 80019ca:	431a      	orrs	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	619a      	str	r2, [r3, #24]
}
 80019d0:	bf00      	nop
 80019d2:	3714      	adds	r7, #20
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019e8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019ec:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019f2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d102      	bne.n	8001a02 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	f000 bff4 	b.w	80029ea <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a06:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f000 816d 	beq.w	8001cf2 <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001a18:	4bb4      	ldr	r3, [pc, #720]	@ (8001cec <HAL_RCC_OscConfig+0x310>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f003 030c 	and.w	r3, r3, #12
 8001a20:	2b04      	cmp	r3, #4
 8001a22:	d00c      	beq.n	8001a3e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a24:	4bb1      	ldr	r3, [pc, #708]	@ (8001cec <HAL_RCC_OscConfig+0x310>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f003 030c 	and.w	r3, r3, #12
 8001a2c:	2b08      	cmp	r3, #8
 8001a2e:	d157      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x104>
 8001a30:	4bae      	ldr	r3, [pc, #696]	@ (8001cec <HAL_RCC_OscConfig+0x310>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a3c:	d150      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x104>
 8001a3e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a42:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a46:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001a4a:	fa93 f3a3 	rbit	r3, r3
 8001a4e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a52:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a56:	fab3 f383 	clz	r3, r3
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a5e:	d802      	bhi.n	8001a66 <HAL_RCC_OscConfig+0x8a>
 8001a60:	4ba2      	ldr	r3, [pc, #648]	@ (8001cec <HAL_RCC_OscConfig+0x310>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	e015      	b.n	8001a92 <HAL_RCC_OscConfig+0xb6>
 8001a66:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a6a:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a6e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001a72:	fa93 f3a3 	rbit	r3, r3
 8001a76:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001a7a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a7e:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001a82:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001a86:	fa93 f3a3 	rbit	r3, r3
 8001a8a:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001a8e:	4b97      	ldr	r3, [pc, #604]	@ (8001cec <HAL_RCC_OscConfig+0x310>)
 8001a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a92:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001a96:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001a9a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001a9e:	fa92 f2a2 	rbit	r2, r2
 8001aa2:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001aa6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001aaa:	fab2 f282 	clz	r2, r2
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	f042 0220 	orr.w	r2, r2, #32
 8001ab4:	b2d2      	uxtb	r2, r2
 8001ab6:	f002 021f 	and.w	r2, r2, #31
 8001aba:	2101      	movs	r1, #1
 8001abc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	f000 8114 	beq.w	8001cf0 <HAL_RCC_OscConfig+0x314>
 8001ac8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001acc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	f040 810b 	bne.w	8001cf0 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	f000 bf85 	b.w	80029ea <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ae0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ae4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001af0:	d106      	bne.n	8001b00 <HAL_RCC_OscConfig+0x124>
 8001af2:	4b7e      	ldr	r3, [pc, #504]	@ (8001cec <HAL_RCC_OscConfig+0x310>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a7d      	ldr	r2, [pc, #500]	@ (8001cec <HAL_RCC_OscConfig+0x310>)
 8001af8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001afc:	6013      	str	r3, [r2, #0]
 8001afe:	e036      	b.n	8001b6e <HAL_RCC_OscConfig+0x192>
 8001b00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b04:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d10c      	bne.n	8001b2a <HAL_RCC_OscConfig+0x14e>
 8001b10:	4b76      	ldr	r3, [pc, #472]	@ (8001cec <HAL_RCC_OscConfig+0x310>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a75      	ldr	r2, [pc, #468]	@ (8001cec <HAL_RCC_OscConfig+0x310>)
 8001b16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b1a:	6013      	str	r3, [r2, #0]
 8001b1c:	4b73      	ldr	r3, [pc, #460]	@ (8001cec <HAL_RCC_OscConfig+0x310>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a72      	ldr	r2, [pc, #456]	@ (8001cec <HAL_RCC_OscConfig+0x310>)
 8001b22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b26:	6013      	str	r3, [r2, #0]
 8001b28:	e021      	b.n	8001b6e <HAL_RCC_OscConfig+0x192>
 8001b2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b2e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b3a:	d10c      	bne.n	8001b56 <HAL_RCC_OscConfig+0x17a>
 8001b3c:	4b6b      	ldr	r3, [pc, #428]	@ (8001cec <HAL_RCC_OscConfig+0x310>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a6a      	ldr	r2, [pc, #424]	@ (8001cec <HAL_RCC_OscConfig+0x310>)
 8001b42:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b46:	6013      	str	r3, [r2, #0]
 8001b48:	4b68      	ldr	r3, [pc, #416]	@ (8001cec <HAL_RCC_OscConfig+0x310>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a67      	ldr	r2, [pc, #412]	@ (8001cec <HAL_RCC_OscConfig+0x310>)
 8001b4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b52:	6013      	str	r3, [r2, #0]
 8001b54:	e00b      	b.n	8001b6e <HAL_RCC_OscConfig+0x192>
 8001b56:	4b65      	ldr	r3, [pc, #404]	@ (8001cec <HAL_RCC_OscConfig+0x310>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a64      	ldr	r2, [pc, #400]	@ (8001cec <HAL_RCC_OscConfig+0x310>)
 8001b5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b60:	6013      	str	r3, [r2, #0]
 8001b62:	4b62      	ldr	r3, [pc, #392]	@ (8001cec <HAL_RCC_OscConfig+0x310>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a61      	ldr	r2, [pc, #388]	@ (8001cec <HAL_RCC_OscConfig+0x310>)
 8001b68:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b6c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b6e:	4b5f      	ldr	r3, [pc, #380]	@ (8001cec <HAL_RCC_OscConfig+0x310>)
 8001b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b72:	f023 020f 	bic.w	r2, r3, #15
 8001b76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b7a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	495a      	ldr	r1, [pc, #360]	@ (8001cec <HAL_RCC_OscConfig+0x310>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b8c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d054      	beq.n	8001c42 <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b98:	f7fe fdb4 	bl	8000704 <HAL_GetTick>
 8001b9c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ba0:	e00a      	b.n	8001bb8 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ba2:	f7fe fdaf 	bl	8000704 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b64      	cmp	r3, #100	@ 0x64
 8001bb0:	d902      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	f000 bf19 	b.w	80029ea <HAL_RCC_OscConfig+0x100e>
 8001bb8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001bbc:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001bc4:	fa93 f3a3 	rbit	r3, r3
 8001bc8:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001bcc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bd0:	fab3 f383 	clz	r3, r3
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b3f      	cmp	r3, #63	@ 0x3f
 8001bd8:	d802      	bhi.n	8001be0 <HAL_RCC_OscConfig+0x204>
 8001bda:	4b44      	ldr	r3, [pc, #272]	@ (8001cec <HAL_RCC_OscConfig+0x310>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	e015      	b.n	8001c0c <HAL_RCC_OscConfig+0x230>
 8001be0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001be4:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001bec:	fa93 f3a3 	rbit	r3, r3
 8001bf0:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001bf4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001bf8:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001bfc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001c00:	fa93 f3a3 	rbit	r3, r3
 8001c04:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001c08:	4b38      	ldr	r3, [pc, #224]	@ (8001cec <HAL_RCC_OscConfig+0x310>)
 8001c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c0c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001c10:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001c14:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001c18:	fa92 f2a2 	rbit	r2, r2
 8001c1c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001c20:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001c24:	fab2 f282 	clz	r2, r2
 8001c28:	b2d2      	uxtb	r2, r2
 8001c2a:	f042 0220 	orr.w	r2, r2, #32
 8001c2e:	b2d2      	uxtb	r2, r2
 8001c30:	f002 021f 	and.w	r2, r2, #31
 8001c34:	2101      	movs	r1, #1
 8001c36:	fa01 f202 	lsl.w	r2, r1, r2
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d0b0      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x1c6>
 8001c40:	e057      	b.n	8001cf2 <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c42:	f7fe fd5f 	bl	8000704 <HAL_GetTick>
 8001c46:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c4a:	e00a      	b.n	8001c62 <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c4c:	f7fe fd5a 	bl	8000704 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	2b64      	cmp	r3, #100	@ 0x64
 8001c5a:	d902      	bls.n	8001c62 <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	f000 bec4 	b.w	80029ea <HAL_RCC_OscConfig+0x100e>
 8001c62:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c66:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001c6e:	fa93 f3a3 	rbit	r3, r3
 8001c72:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001c76:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c7a:	fab3 f383 	clz	r3, r3
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c82:	d802      	bhi.n	8001c8a <HAL_RCC_OscConfig+0x2ae>
 8001c84:	4b19      	ldr	r3, [pc, #100]	@ (8001cec <HAL_RCC_OscConfig+0x310>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	e015      	b.n	8001cb6 <HAL_RCC_OscConfig+0x2da>
 8001c8a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c8e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c92:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001c96:	fa93 f3a3 	rbit	r3, r3
 8001c9a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001c9e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ca2:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001ca6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001caa:	fa93 f3a3 	rbit	r3, r3
 8001cae:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001cb2:	4b0e      	ldr	r3, [pc, #56]	@ (8001cec <HAL_RCC_OscConfig+0x310>)
 8001cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001cba:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001cbe:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001cc2:	fa92 f2a2 	rbit	r2, r2
 8001cc6:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001cca:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001cce:	fab2 f282 	clz	r2, r2
 8001cd2:	b2d2      	uxtb	r2, r2
 8001cd4:	f042 0220 	orr.w	r2, r2, #32
 8001cd8:	b2d2      	uxtb	r2, r2
 8001cda:	f002 021f 	and.w	r2, r2, #31
 8001cde:	2101      	movs	r1, #1
 8001ce0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d1b0      	bne.n	8001c4c <HAL_RCC_OscConfig+0x270>
 8001cea:	e002      	b.n	8001cf2 <HAL_RCC_OscConfig+0x316>
 8001cec:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cf2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cf6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	f000 816c 	beq.w	8001fe0 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d08:	4bcc      	ldr	r3, [pc, #816]	@ (800203c <HAL_RCC_OscConfig+0x660>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f003 030c 	and.w	r3, r3, #12
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d00b      	beq.n	8001d2c <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d14:	4bc9      	ldr	r3, [pc, #804]	@ (800203c <HAL_RCC_OscConfig+0x660>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f003 030c 	and.w	r3, r3, #12
 8001d1c:	2b08      	cmp	r3, #8
 8001d1e:	d16d      	bne.n	8001dfc <HAL_RCC_OscConfig+0x420>
 8001d20:	4bc6      	ldr	r3, [pc, #792]	@ (800203c <HAL_RCC_OscConfig+0x660>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d167      	bne.n	8001dfc <HAL_RCC_OscConfig+0x420>
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d32:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001d36:	fa93 f3a3 	rbit	r3, r3
 8001d3a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001d3e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d42:	fab3 f383 	clz	r3, r3
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d4a:	d802      	bhi.n	8001d52 <HAL_RCC_OscConfig+0x376>
 8001d4c:	4bbb      	ldr	r3, [pc, #748]	@ (800203c <HAL_RCC_OscConfig+0x660>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	e013      	b.n	8001d7a <HAL_RCC_OscConfig+0x39e>
 8001d52:	2302      	movs	r3, #2
 8001d54:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d58:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001d5c:	fa93 f3a3 	rbit	r3, r3
 8001d60:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001d64:	2302      	movs	r3, #2
 8001d66:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001d6a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001d6e:	fa93 f3a3 	rbit	r3, r3
 8001d72:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001d76:	4bb1      	ldr	r3, [pc, #708]	@ (800203c <HAL_RCC_OscConfig+0x660>)
 8001d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d7a:	2202      	movs	r2, #2
 8001d7c:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001d80:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001d84:	fa92 f2a2 	rbit	r2, r2
 8001d88:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001d8c:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001d90:	fab2 f282 	clz	r2, r2
 8001d94:	b2d2      	uxtb	r2, r2
 8001d96:	f042 0220 	orr.w	r2, r2, #32
 8001d9a:	b2d2      	uxtb	r2, r2
 8001d9c:	f002 021f 	and.w	r2, r2, #31
 8001da0:	2101      	movs	r1, #1
 8001da2:	fa01 f202 	lsl.w	r2, r1, r2
 8001da6:	4013      	ands	r3, r2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d00a      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x3e6>
 8001dac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001db0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d002      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	f000 be14 	b.w	80029ea <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc2:	4b9e      	ldr	r3, [pc, #632]	@ (800203c <HAL_RCC_OscConfig+0x660>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001dca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	695b      	ldr	r3, [r3, #20]
 8001dd6:	21f8      	movs	r1, #248	@ 0xf8
 8001dd8:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ddc:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001de0:	fa91 f1a1 	rbit	r1, r1
 8001de4:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001de8:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001dec:	fab1 f181 	clz	r1, r1
 8001df0:	b2c9      	uxtb	r1, r1
 8001df2:	408b      	lsls	r3, r1
 8001df4:	4991      	ldr	r1, [pc, #580]	@ (800203c <HAL_RCC_OscConfig+0x660>)
 8001df6:	4313      	orrs	r3, r2
 8001df8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dfa:	e0f1      	b.n	8001fe0 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e00:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	f000 8083 	beq.w	8001f14 <HAL_RCC_OscConfig+0x538>
 8001e0e:	2301      	movs	r3, #1
 8001e10:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e14:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001e18:	fa93 f3a3 	rbit	r3, r3
 8001e1c:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001e20:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e24:	fab3 f383 	clz	r3, r3
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001e2e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	461a      	mov	r2, r3
 8001e36:	2301      	movs	r3, #1
 8001e38:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3a:	f7fe fc63 	bl	8000704 <HAL_GetTick>
 8001e3e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e42:	e00a      	b.n	8001e5a <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e44:	f7fe fc5e 	bl	8000704 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d902      	bls.n	8001e5a <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	f000 bdc8 	b.w	80029ea <HAL_RCC_OscConfig+0x100e>
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e60:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001e64:	fa93 f3a3 	rbit	r3, r3
 8001e68:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001e6c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e70:	fab3 f383 	clz	r3, r3
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e78:	d802      	bhi.n	8001e80 <HAL_RCC_OscConfig+0x4a4>
 8001e7a:	4b70      	ldr	r3, [pc, #448]	@ (800203c <HAL_RCC_OscConfig+0x660>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	e013      	b.n	8001ea8 <HAL_RCC_OscConfig+0x4cc>
 8001e80:	2302      	movs	r3, #2
 8001e82:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e86:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001e8a:	fa93 f3a3 	rbit	r3, r3
 8001e8e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001e92:	2302      	movs	r3, #2
 8001e94:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001e98:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001e9c:	fa93 f3a3 	rbit	r3, r3
 8001ea0:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001ea4:	4b65      	ldr	r3, [pc, #404]	@ (800203c <HAL_RCC_OscConfig+0x660>)
 8001ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea8:	2202      	movs	r2, #2
 8001eaa:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001eae:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001eb2:	fa92 f2a2 	rbit	r2, r2
 8001eb6:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001eba:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001ebe:	fab2 f282 	clz	r2, r2
 8001ec2:	b2d2      	uxtb	r2, r2
 8001ec4:	f042 0220 	orr.w	r2, r2, #32
 8001ec8:	b2d2      	uxtb	r2, r2
 8001eca:	f002 021f 	and.w	r2, r2, #31
 8001ece:	2101      	movs	r1, #1
 8001ed0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d0b4      	beq.n	8001e44 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eda:	4b58      	ldr	r3, [pc, #352]	@ (800203c <HAL_RCC_OscConfig+0x660>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ee2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ee6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	21f8      	movs	r1, #248	@ 0xf8
 8001ef0:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef4:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001ef8:	fa91 f1a1 	rbit	r1, r1
 8001efc:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001f00:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001f04:	fab1 f181 	clz	r1, r1
 8001f08:	b2c9      	uxtb	r1, r1
 8001f0a:	408b      	lsls	r3, r1
 8001f0c:	494b      	ldr	r1, [pc, #300]	@ (800203c <HAL_RCC_OscConfig+0x660>)
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	600b      	str	r3, [r1, #0]
 8001f12:	e065      	b.n	8001fe0 <HAL_RCC_OscConfig+0x604>
 8001f14:	2301      	movs	r3, #1
 8001f16:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001f1e:	fa93 f3a3 	rbit	r3, r3
 8001f22:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001f26:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f2a:	fab3 f383 	clz	r3, r3
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001f34:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f40:	f7fe fbe0 	bl	8000704 <HAL_GetTick>
 8001f44:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f48:	e00a      	b.n	8001f60 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f4a:	f7fe fbdb 	bl	8000704 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d902      	bls.n	8001f60 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	f000 bd45 	b.w	80029ea <HAL_RCC_OscConfig+0x100e>
 8001f60:	2302      	movs	r3, #2
 8001f62:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f66:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001f6a:	fa93 f3a3 	rbit	r3, r3
 8001f6e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001f72:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f76:	fab3 f383 	clz	r3, r3
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	2b3f      	cmp	r3, #63	@ 0x3f
 8001f7e:	d802      	bhi.n	8001f86 <HAL_RCC_OscConfig+0x5aa>
 8001f80:	4b2e      	ldr	r3, [pc, #184]	@ (800203c <HAL_RCC_OscConfig+0x660>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	e013      	b.n	8001fae <HAL_RCC_OscConfig+0x5d2>
 8001f86:	2302      	movs	r3, #2
 8001f88:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001f90:	fa93 f3a3 	rbit	r3, r3
 8001f94:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001f98:	2302      	movs	r3, #2
 8001f9a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001f9e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001fa2:	fa93 f3a3 	rbit	r3, r3
 8001fa6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001faa:	4b24      	ldr	r3, [pc, #144]	@ (800203c <HAL_RCC_OscConfig+0x660>)
 8001fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fae:	2202      	movs	r2, #2
 8001fb0:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001fb4:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001fb8:	fa92 f2a2 	rbit	r2, r2
 8001fbc:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001fc0:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001fc4:	fab2 f282 	clz	r2, r2
 8001fc8:	b2d2      	uxtb	r2, r2
 8001fca:	f042 0220 	orr.w	r2, r2, #32
 8001fce:	b2d2      	uxtb	r2, r2
 8001fd0:	f002 021f 	and.w	r2, r2, #31
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	fa01 f202 	lsl.w	r2, r1, r2
 8001fda:	4013      	ands	r3, r2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1b4      	bne.n	8001f4a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fe0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fe4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0308 	and.w	r3, r3, #8
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f000 8115 	beq.w	8002220 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ff6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ffa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d07e      	beq.n	8002104 <HAL_RCC_OscConfig+0x728>
 8002006:	2301      	movs	r3, #1
 8002008:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002010:	fa93 f3a3 	rbit	r3, r3
 8002014:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002018:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800201c:	fab3 f383 	clz	r3, r3
 8002020:	b2db      	uxtb	r3, r3
 8002022:	461a      	mov	r2, r3
 8002024:	4b06      	ldr	r3, [pc, #24]	@ (8002040 <HAL_RCC_OscConfig+0x664>)
 8002026:	4413      	add	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	461a      	mov	r2, r3
 800202c:	2301      	movs	r3, #1
 800202e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002030:	f7fe fb68 	bl	8000704 <HAL_GetTick>
 8002034:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002038:	e00f      	b.n	800205a <HAL_RCC_OscConfig+0x67e>
 800203a:	bf00      	nop
 800203c:	40021000 	.word	0x40021000
 8002040:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002044:	f7fe fb5e 	bl	8000704 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	2b02      	cmp	r3, #2
 8002052:	d902      	bls.n	800205a <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	f000 bcc8 	b.w	80029ea <HAL_RCC_OscConfig+0x100e>
 800205a:	2302      	movs	r3, #2
 800205c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002060:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002064:	fa93 f3a3 	rbit	r3, r3
 8002068:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800206c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002070:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002074:	2202      	movs	r2, #2
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800207c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	fa93 f2a3 	rbit	r2, r3
 8002086:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800208a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002094:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002098:	2202      	movs	r2, #2
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	fa93 f2a3 	rbit	r2, r3
 80020aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020ae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80020b2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020b4:	4bb0      	ldr	r3, [pc, #704]	@ (8002378 <HAL_RCC_OscConfig+0x99c>)
 80020b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80020b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020bc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80020c0:	2102      	movs	r1, #2
 80020c2:	6019      	str	r1, [r3, #0]
 80020c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020c8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	fa93 f1a3 	rbit	r1, r3
 80020d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020d6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80020da:	6019      	str	r1, [r3, #0]
  return result;
 80020dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020e0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	fab3 f383 	clz	r3, r3
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	f003 031f 	and.w	r3, r3, #31
 80020f6:	2101      	movs	r1, #1
 80020f8:	fa01 f303 	lsl.w	r3, r1, r3
 80020fc:	4013      	ands	r3, r2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d0a0      	beq.n	8002044 <HAL_RCC_OscConfig+0x668>
 8002102:	e08d      	b.n	8002220 <HAL_RCC_OscConfig+0x844>
 8002104:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002108:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800210c:	2201      	movs	r2, #1
 800210e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002110:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002114:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	fa93 f2a3 	rbit	r2, r3
 800211e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002122:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002126:	601a      	str	r2, [r3, #0]
  return result;
 8002128:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800212c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002130:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002132:	fab3 f383 	clz	r3, r3
 8002136:	b2db      	uxtb	r3, r3
 8002138:	461a      	mov	r2, r3
 800213a:	4b90      	ldr	r3, [pc, #576]	@ (800237c <HAL_RCC_OscConfig+0x9a0>)
 800213c:	4413      	add	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	461a      	mov	r2, r3
 8002142:	2300      	movs	r3, #0
 8002144:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002146:	f7fe fadd 	bl	8000704 <HAL_GetTick>
 800214a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800214e:	e00a      	b.n	8002166 <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002150:	f7fe fad8 	bl	8000704 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d902      	bls.n	8002166 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	f000 bc42 	b.w	80029ea <HAL_RCC_OscConfig+0x100e>
 8002166:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800216a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800216e:	2202      	movs	r2, #2
 8002170:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002172:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002176:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	fa93 f2a3 	rbit	r2, r3
 8002180:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002184:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800218e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002192:	2202      	movs	r2, #2
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800219a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	fa93 f2a3 	rbit	r2, r3
 80021a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021a8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021b2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80021b6:	2202      	movs	r2, #2
 80021b8:	601a      	str	r2, [r3, #0]
 80021ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021be:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	fa93 f2a3 	rbit	r2, r3
 80021c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021cc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80021d0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021d2:	4b69      	ldr	r3, [pc, #420]	@ (8002378 <HAL_RCC_OscConfig+0x99c>)
 80021d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80021d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021da:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80021de:	2102      	movs	r1, #2
 80021e0:	6019      	str	r1, [r3, #0]
 80021e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021e6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	fa93 f1a3 	rbit	r1, r3
 80021f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021f4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80021f8:	6019      	str	r1, [r3, #0]
  return result;
 80021fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021fe:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	fab3 f383 	clz	r3, r3
 8002208:	b2db      	uxtb	r3, r3
 800220a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800220e:	b2db      	uxtb	r3, r3
 8002210:	f003 031f 	and.w	r3, r3, #31
 8002214:	2101      	movs	r1, #1
 8002216:	fa01 f303 	lsl.w	r3, r1, r3
 800221a:	4013      	ands	r3, r2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d197      	bne.n	8002150 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002220:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002224:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0304 	and.w	r3, r3, #4
 8002230:	2b00      	cmp	r3, #0
 8002232:	f000 819e 	beq.w	8002572 <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002236:	2300      	movs	r3, #0
 8002238:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800223c:	4b4e      	ldr	r3, [pc, #312]	@ (8002378 <HAL_RCC_OscConfig+0x99c>)
 800223e:	69db      	ldr	r3, [r3, #28]
 8002240:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d116      	bne.n	8002276 <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002248:	4b4b      	ldr	r3, [pc, #300]	@ (8002378 <HAL_RCC_OscConfig+0x99c>)
 800224a:	69db      	ldr	r3, [r3, #28]
 800224c:	4a4a      	ldr	r2, [pc, #296]	@ (8002378 <HAL_RCC_OscConfig+0x99c>)
 800224e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002252:	61d3      	str	r3, [r2, #28]
 8002254:	4b48      	ldr	r3, [pc, #288]	@ (8002378 <HAL_RCC_OscConfig+0x99c>)
 8002256:	69db      	ldr	r3, [r3, #28]
 8002258:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800225c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002260:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800226a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800226e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002270:	2301      	movs	r3, #1
 8002272:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002276:	4b42      	ldr	r3, [pc, #264]	@ (8002380 <HAL_RCC_OscConfig+0x9a4>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800227e:	2b00      	cmp	r3, #0
 8002280:	d11a      	bne.n	80022b8 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002282:	4b3f      	ldr	r3, [pc, #252]	@ (8002380 <HAL_RCC_OscConfig+0x9a4>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a3e      	ldr	r2, [pc, #248]	@ (8002380 <HAL_RCC_OscConfig+0x9a4>)
 8002288:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800228c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800228e:	f7fe fa39 	bl	8000704 <HAL_GetTick>
 8002292:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002296:	e009      	b.n	80022ac <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002298:	f7fe fa34 	bl	8000704 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	2b64      	cmp	r3, #100	@ 0x64
 80022a6:	d901      	bls.n	80022ac <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e39e      	b.n	80029ea <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ac:	4b34      	ldr	r3, [pc, #208]	@ (8002380 <HAL_RCC_OscConfig+0x9a4>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d0ef      	beq.n	8002298 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d106      	bne.n	80022d6 <HAL_RCC_OscConfig+0x8fa>
 80022c8:	4b2b      	ldr	r3, [pc, #172]	@ (8002378 <HAL_RCC_OscConfig+0x99c>)
 80022ca:	6a1b      	ldr	r3, [r3, #32]
 80022cc:	4a2a      	ldr	r2, [pc, #168]	@ (8002378 <HAL_RCC_OscConfig+0x99c>)
 80022ce:	f043 0301 	orr.w	r3, r3, #1
 80022d2:	6213      	str	r3, [r2, #32]
 80022d4:	e035      	b.n	8002342 <HAL_RCC_OscConfig+0x966>
 80022d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d10c      	bne.n	8002300 <HAL_RCC_OscConfig+0x924>
 80022e6:	4b24      	ldr	r3, [pc, #144]	@ (8002378 <HAL_RCC_OscConfig+0x99c>)
 80022e8:	6a1b      	ldr	r3, [r3, #32]
 80022ea:	4a23      	ldr	r2, [pc, #140]	@ (8002378 <HAL_RCC_OscConfig+0x99c>)
 80022ec:	f023 0301 	bic.w	r3, r3, #1
 80022f0:	6213      	str	r3, [r2, #32]
 80022f2:	4b21      	ldr	r3, [pc, #132]	@ (8002378 <HAL_RCC_OscConfig+0x99c>)
 80022f4:	6a1b      	ldr	r3, [r3, #32]
 80022f6:	4a20      	ldr	r2, [pc, #128]	@ (8002378 <HAL_RCC_OscConfig+0x99c>)
 80022f8:	f023 0304 	bic.w	r3, r3, #4
 80022fc:	6213      	str	r3, [r2, #32]
 80022fe:	e020      	b.n	8002342 <HAL_RCC_OscConfig+0x966>
 8002300:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002304:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	2b05      	cmp	r3, #5
 800230e:	d10c      	bne.n	800232a <HAL_RCC_OscConfig+0x94e>
 8002310:	4b19      	ldr	r3, [pc, #100]	@ (8002378 <HAL_RCC_OscConfig+0x99c>)
 8002312:	6a1b      	ldr	r3, [r3, #32]
 8002314:	4a18      	ldr	r2, [pc, #96]	@ (8002378 <HAL_RCC_OscConfig+0x99c>)
 8002316:	f043 0304 	orr.w	r3, r3, #4
 800231a:	6213      	str	r3, [r2, #32]
 800231c:	4b16      	ldr	r3, [pc, #88]	@ (8002378 <HAL_RCC_OscConfig+0x99c>)
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	4a15      	ldr	r2, [pc, #84]	@ (8002378 <HAL_RCC_OscConfig+0x99c>)
 8002322:	f043 0301 	orr.w	r3, r3, #1
 8002326:	6213      	str	r3, [r2, #32]
 8002328:	e00b      	b.n	8002342 <HAL_RCC_OscConfig+0x966>
 800232a:	4b13      	ldr	r3, [pc, #76]	@ (8002378 <HAL_RCC_OscConfig+0x99c>)
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	4a12      	ldr	r2, [pc, #72]	@ (8002378 <HAL_RCC_OscConfig+0x99c>)
 8002330:	f023 0301 	bic.w	r3, r3, #1
 8002334:	6213      	str	r3, [r2, #32]
 8002336:	4b10      	ldr	r3, [pc, #64]	@ (8002378 <HAL_RCC_OscConfig+0x99c>)
 8002338:	6a1b      	ldr	r3, [r3, #32]
 800233a:	4a0f      	ldr	r2, [pc, #60]	@ (8002378 <HAL_RCC_OscConfig+0x99c>)
 800233c:	f023 0304 	bic.w	r3, r3, #4
 8002340:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002342:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002346:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	2b00      	cmp	r3, #0
 8002350:	f000 8087 	beq.w	8002462 <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002354:	f7fe f9d6 	bl	8000704 <HAL_GetTick>
 8002358:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800235c:	e012      	b.n	8002384 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800235e:	f7fe f9d1 	bl	8000704 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800236e:	4293      	cmp	r3, r2
 8002370:	d908      	bls.n	8002384 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e339      	b.n	80029ea <HAL_RCC_OscConfig+0x100e>
 8002376:	bf00      	nop
 8002378:	40021000 	.word	0x40021000
 800237c:	10908120 	.word	0x10908120
 8002380:	40007000 	.word	0x40007000
 8002384:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002388:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800238c:	2202      	movs	r2, #2
 800238e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002390:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002394:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	fa93 f2a3 	rbit	r2, r3
 800239e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023a2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ac:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80023b0:	2202      	movs	r2, #2
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023b8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	fa93 f2a3 	rbit	r2, r3
 80023c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023c6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80023ca:	601a      	str	r2, [r3, #0]
  return result;
 80023cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023d0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80023d4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d6:	fab3 f383 	clz	r3, r3
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d102      	bne.n	80023ec <HAL_RCC_OscConfig+0xa10>
 80023e6:	4b98      	ldr	r3, [pc, #608]	@ (8002648 <HAL_RCC_OscConfig+0xc6c>)
 80023e8:	6a1b      	ldr	r3, [r3, #32]
 80023ea:	e013      	b.n	8002414 <HAL_RCC_OscConfig+0xa38>
 80023ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023f0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80023f4:	2202      	movs	r2, #2
 80023f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023fc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	fa93 f2a3 	rbit	r2, r3
 8002406:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800240a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	4b8d      	ldr	r3, [pc, #564]	@ (8002648 <HAL_RCC_OscConfig+0xc6c>)
 8002412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002414:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002418:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800241c:	2102      	movs	r1, #2
 800241e:	6011      	str	r1, [r2, #0]
 8002420:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002424:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002428:	6812      	ldr	r2, [r2, #0]
 800242a:	fa92 f1a2 	rbit	r1, r2
 800242e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002432:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002436:	6011      	str	r1, [r2, #0]
  return result;
 8002438:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800243c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002440:	6812      	ldr	r2, [r2, #0]
 8002442:	fab2 f282 	clz	r2, r2
 8002446:	b2d2      	uxtb	r2, r2
 8002448:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800244c:	b2d2      	uxtb	r2, r2
 800244e:	f002 021f 	and.w	r2, r2, #31
 8002452:	2101      	movs	r1, #1
 8002454:	fa01 f202 	lsl.w	r2, r1, r2
 8002458:	4013      	ands	r3, r2
 800245a:	2b00      	cmp	r3, #0
 800245c:	f43f af7f 	beq.w	800235e <HAL_RCC_OscConfig+0x982>
 8002460:	e07d      	b.n	800255e <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002462:	f7fe f94f 	bl	8000704 <HAL_GetTick>
 8002466:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800246a:	e00b      	b.n	8002484 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800246c:	f7fe f94a 	bl	8000704 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	f241 3288 	movw	r2, #5000	@ 0x1388
 800247c:	4293      	cmp	r3, r2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e2b2      	b.n	80029ea <HAL_RCC_OscConfig+0x100e>
 8002484:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002488:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800248c:	2202      	movs	r2, #2
 800248e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002490:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002494:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	fa93 f2a3 	rbit	r2, r3
 800249e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024a2:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ac:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80024b0:	2202      	movs	r2, #2
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024b8:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	fa93 f2a3 	rbit	r2, r3
 80024c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024c6:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80024ca:	601a      	str	r2, [r3, #0]
  return result;
 80024cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024d0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80024d4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024d6:	fab3 f383 	clz	r3, r3
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d102      	bne.n	80024ec <HAL_RCC_OscConfig+0xb10>
 80024e6:	4b58      	ldr	r3, [pc, #352]	@ (8002648 <HAL_RCC_OscConfig+0xc6c>)
 80024e8:	6a1b      	ldr	r3, [r3, #32]
 80024ea:	e013      	b.n	8002514 <HAL_RCC_OscConfig+0xb38>
 80024ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024f0:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80024f4:	2202      	movs	r2, #2
 80024f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024fc:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	fa93 f2a3 	rbit	r2, r3
 8002506:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800250a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	4b4d      	ldr	r3, [pc, #308]	@ (8002648 <HAL_RCC_OscConfig+0xc6c>)
 8002512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002514:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002518:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800251c:	2102      	movs	r1, #2
 800251e:	6011      	str	r1, [r2, #0]
 8002520:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002524:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002528:	6812      	ldr	r2, [r2, #0]
 800252a:	fa92 f1a2 	rbit	r1, r2
 800252e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002532:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002536:	6011      	str	r1, [r2, #0]
  return result;
 8002538:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800253c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002540:	6812      	ldr	r2, [r2, #0]
 8002542:	fab2 f282 	clz	r2, r2
 8002546:	b2d2      	uxtb	r2, r2
 8002548:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800254c:	b2d2      	uxtb	r2, r2
 800254e:	f002 021f 	and.w	r2, r2, #31
 8002552:	2101      	movs	r1, #1
 8002554:	fa01 f202 	lsl.w	r2, r1, r2
 8002558:	4013      	ands	r3, r2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d186      	bne.n	800246c <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800255e:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002562:	2b01      	cmp	r3, #1
 8002564:	d105      	bne.n	8002572 <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002566:	4b38      	ldr	r3, [pc, #224]	@ (8002648 <HAL_RCC_OscConfig+0xc6c>)
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	4a37      	ldr	r2, [pc, #220]	@ (8002648 <HAL_RCC_OscConfig+0xc6c>)
 800256c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002570:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002572:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002576:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	69db      	ldr	r3, [r3, #28]
 800257e:	2b00      	cmp	r3, #0
 8002580:	f000 8232 	beq.w	80029e8 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002584:	4b30      	ldr	r3, [pc, #192]	@ (8002648 <HAL_RCC_OscConfig+0xc6c>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f003 030c 	and.w	r3, r3, #12
 800258c:	2b08      	cmp	r3, #8
 800258e:	f000 8201 	beq.w	8002994 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002592:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002596:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	2b02      	cmp	r3, #2
 80025a0:	f040 8157 	bne.w	8002852 <HAL_RCC_OscConfig+0xe76>
 80025a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025a8:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80025ac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80025b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025b6:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	fa93 f2a3 	rbit	r2, r3
 80025c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025c4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80025c8:	601a      	str	r2, [r3, #0]
  return result;
 80025ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ce:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80025d2:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025d4:	fab3 f383 	clz	r3, r3
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80025de:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	461a      	mov	r2, r3
 80025e6:	2300      	movs	r3, #0
 80025e8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ea:	f7fe f88b 	bl	8000704 <HAL_GetTick>
 80025ee:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025f2:	e009      	b.n	8002608 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025f4:	f7fe f886 	bl	8000704 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d901      	bls.n	8002608 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e1f0      	b.n	80029ea <HAL_RCC_OscConfig+0x100e>
 8002608:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800260c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002610:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002614:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002616:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800261a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	fa93 f2a3 	rbit	r2, r3
 8002624:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002628:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800262c:	601a      	str	r2, [r3, #0]
  return result;
 800262e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002632:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002636:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002638:	fab3 f383 	clz	r3, r3
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002640:	d804      	bhi.n	800264c <HAL_RCC_OscConfig+0xc70>
 8002642:	4b01      	ldr	r3, [pc, #4]	@ (8002648 <HAL_RCC_OscConfig+0xc6c>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	e029      	b.n	800269c <HAL_RCC_OscConfig+0xcc0>
 8002648:	40021000 	.word	0x40021000
 800264c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002650:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002654:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002658:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800265e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	fa93 f2a3 	rbit	r2, r3
 8002668:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800266c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002670:	601a      	str	r2, [r3, #0]
 8002672:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002676:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800267a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800267e:	601a      	str	r2, [r3, #0]
 8002680:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002684:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	fa93 f2a3 	rbit	r2, r3
 800268e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002692:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	4bc3      	ldr	r3, [pc, #780]	@ (80029a8 <HAL_RCC_OscConfig+0xfcc>)
 800269a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800269c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026a0:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80026a4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80026a8:	6011      	str	r1, [r2, #0]
 80026aa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026ae:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80026b2:	6812      	ldr	r2, [r2, #0]
 80026b4:	fa92 f1a2 	rbit	r1, r2
 80026b8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026bc:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80026c0:	6011      	str	r1, [r2, #0]
  return result;
 80026c2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026c6:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80026ca:	6812      	ldr	r2, [r2, #0]
 80026cc:	fab2 f282 	clz	r2, r2
 80026d0:	b2d2      	uxtb	r2, r2
 80026d2:	f042 0220 	orr.w	r2, r2, #32
 80026d6:	b2d2      	uxtb	r2, r2
 80026d8:	f002 021f 	and.w	r2, r2, #31
 80026dc:	2101      	movs	r1, #1
 80026de:	fa01 f202 	lsl.w	r2, r1, r2
 80026e2:	4013      	ands	r3, r2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d185      	bne.n	80025f4 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026e8:	4baf      	ldr	r3, [pc, #700]	@ (80029a8 <HAL_RCC_OscConfig+0xfcc>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80026f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80026fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002700:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	430b      	orrs	r3, r1
 800270a:	49a7      	ldr	r1, [pc, #668]	@ (80029a8 <HAL_RCC_OscConfig+0xfcc>)
 800270c:	4313      	orrs	r3, r2
 800270e:	604b      	str	r3, [r1, #4]
 8002710:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002714:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002718:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800271c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002722:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	fa93 f2a3 	rbit	r2, r3
 800272c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002730:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002734:	601a      	str	r2, [r3, #0]
  return result;
 8002736:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800273a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800273e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002740:	fab3 f383 	clz	r3, r3
 8002744:	b2db      	uxtb	r3, r3
 8002746:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800274a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	461a      	mov	r2, r3
 8002752:	2301      	movs	r3, #1
 8002754:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002756:	f7fd ffd5 	bl	8000704 <HAL_GetTick>
 800275a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800275e:	e009      	b.n	8002774 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002760:	f7fd ffd0 	bl	8000704 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	2b02      	cmp	r3, #2
 800276e:	d901      	bls.n	8002774 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e13a      	b.n	80029ea <HAL_RCC_OscConfig+0x100e>
 8002774:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002778:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800277c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002780:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002782:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002786:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	fa93 f2a3 	rbit	r2, r3
 8002790:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002794:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002798:	601a      	str	r2, [r3, #0]
  return result;
 800279a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800279e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80027a2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027a4:	fab3 f383 	clz	r3, r3
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b3f      	cmp	r3, #63	@ 0x3f
 80027ac:	d802      	bhi.n	80027b4 <HAL_RCC_OscConfig+0xdd8>
 80027ae:	4b7e      	ldr	r3, [pc, #504]	@ (80029a8 <HAL_RCC_OscConfig+0xfcc>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	e027      	b.n	8002804 <HAL_RCC_OscConfig+0xe28>
 80027b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027b8:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80027bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027c6:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	fa93 f2a3 	rbit	r2, r3
 80027d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027d4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027de:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80027e2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ec:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	fa93 f2a3 	rbit	r2, r3
 80027f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027fa:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	4b69      	ldr	r3, [pc, #420]	@ (80029a8 <HAL_RCC_OscConfig+0xfcc>)
 8002802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002804:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002808:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800280c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002810:	6011      	str	r1, [r2, #0]
 8002812:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002816:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800281a:	6812      	ldr	r2, [r2, #0]
 800281c:	fa92 f1a2 	rbit	r1, r2
 8002820:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002824:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002828:	6011      	str	r1, [r2, #0]
  return result;
 800282a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800282e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002832:	6812      	ldr	r2, [r2, #0]
 8002834:	fab2 f282 	clz	r2, r2
 8002838:	b2d2      	uxtb	r2, r2
 800283a:	f042 0220 	orr.w	r2, r2, #32
 800283e:	b2d2      	uxtb	r2, r2
 8002840:	f002 021f 	and.w	r2, r2, #31
 8002844:	2101      	movs	r1, #1
 8002846:	fa01 f202 	lsl.w	r2, r1, r2
 800284a:	4013      	ands	r3, r2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d087      	beq.n	8002760 <HAL_RCC_OscConfig+0xd84>
 8002850:	e0ca      	b.n	80029e8 <HAL_RCC_OscConfig+0x100c>
 8002852:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002856:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800285a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800285e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002860:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002864:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	fa93 f2a3 	rbit	r2, r3
 800286e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002872:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002876:	601a      	str	r2, [r3, #0]
  return result;
 8002878:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800287c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002880:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002882:	fab3 f383 	clz	r3, r3
 8002886:	b2db      	uxtb	r3, r3
 8002888:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800288c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	461a      	mov	r2, r3
 8002894:	2300      	movs	r3, #0
 8002896:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002898:	f7fd ff34 	bl	8000704 <HAL_GetTick>
 800289c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028a0:	e009      	b.n	80028b6 <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028a2:	f7fd ff2f 	bl	8000704 <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e099      	b.n	80029ea <HAL_RCC_OscConfig+0x100e>
 80028b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ba:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80028be:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028c8:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	fa93 f2a3 	rbit	r2, r3
 80028d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028d6:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80028da:	601a      	str	r2, [r3, #0]
  return result;
 80028dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028e0:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80028e4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028e6:	fab3 f383 	clz	r3, r3
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	2b3f      	cmp	r3, #63	@ 0x3f
 80028ee:	d802      	bhi.n	80028f6 <HAL_RCC_OscConfig+0xf1a>
 80028f0:	4b2d      	ldr	r3, [pc, #180]	@ (80029a8 <HAL_RCC_OscConfig+0xfcc>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	e027      	b.n	8002946 <HAL_RCC_OscConfig+0xf6a>
 80028f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028fa:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80028fe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002902:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002904:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002908:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	fa93 f2a3 	rbit	r2, r3
 8002912:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002916:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002920:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002924:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800292e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	fa93 f2a3 	rbit	r2, r3
 8002938:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800293c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002940:	601a      	str	r2, [r3, #0]
 8002942:	4b19      	ldr	r3, [pc, #100]	@ (80029a8 <HAL_RCC_OscConfig+0xfcc>)
 8002944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002946:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800294a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800294e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002952:	6011      	str	r1, [r2, #0]
 8002954:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002958:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800295c:	6812      	ldr	r2, [r2, #0]
 800295e:	fa92 f1a2 	rbit	r1, r2
 8002962:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002966:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800296a:	6011      	str	r1, [r2, #0]
  return result;
 800296c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002970:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002974:	6812      	ldr	r2, [r2, #0]
 8002976:	fab2 f282 	clz	r2, r2
 800297a:	b2d2      	uxtb	r2, r2
 800297c:	f042 0220 	orr.w	r2, r2, #32
 8002980:	b2d2      	uxtb	r2, r2
 8002982:	f002 021f 	and.w	r2, r2, #31
 8002986:	2101      	movs	r1, #1
 8002988:	fa01 f202 	lsl.w	r2, r1, r2
 800298c:	4013      	ands	r3, r2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d187      	bne.n	80028a2 <HAL_RCC_OscConfig+0xec6>
 8002992:	e029      	b.n	80029e8 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002994:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002998:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	69db      	ldr	r3, [r3, #28]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d103      	bne.n	80029ac <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e020      	b.n	80029ea <HAL_RCC_OscConfig+0x100e>
 80029a8:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029ac:	4b11      	ldr	r3, [pc, #68]	@ (80029f4 <HAL_RCC_OscConfig+0x1018>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80029b4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80029b8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80029bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029c0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	6a1b      	ldr	r3, [r3, #32]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d10b      	bne.n	80029e4 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80029cc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80029d0:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80029d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029d8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d001      	beq.n	80029e8 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e000      	b.n	80029ea <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	40021000 	.word	0x40021000

080029f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b09e      	sub	sp, #120	@ 0x78
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002a02:	2300      	movs	r3, #0
 8002a04:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d101      	bne.n	8002a10 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e154      	b.n	8002cba <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a10:	4b89      	ldr	r3, [pc, #548]	@ (8002c38 <HAL_RCC_ClockConfig+0x240>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0307 	and.w	r3, r3, #7
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d910      	bls.n	8002a40 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a1e:	4b86      	ldr	r3, [pc, #536]	@ (8002c38 <HAL_RCC_ClockConfig+0x240>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f023 0207 	bic.w	r2, r3, #7
 8002a26:	4984      	ldr	r1, [pc, #528]	@ (8002c38 <HAL_RCC_ClockConfig+0x240>)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a2e:	4b82      	ldr	r3, [pc, #520]	@ (8002c38 <HAL_RCC_ClockConfig+0x240>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0307 	and.w	r3, r3, #7
 8002a36:	683a      	ldr	r2, [r7, #0]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d001      	beq.n	8002a40 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e13c      	b.n	8002cba <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0302 	and.w	r3, r3, #2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d008      	beq.n	8002a5e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a4c:	4b7b      	ldr	r3, [pc, #492]	@ (8002c3c <HAL_RCC_ClockConfig+0x244>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	4978      	ldr	r1, [pc, #480]	@ (8002c3c <HAL_RCC_ClockConfig+0x244>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f000 80cd 	beq.w	8002c06 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d137      	bne.n	8002ae4 <HAL_RCC_ClockConfig+0xec>
 8002a74:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a78:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a7c:	fa93 f3a3 	rbit	r3, r3
 8002a80:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002a82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a84:	fab3 f383 	clz	r3, r3
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b3f      	cmp	r3, #63	@ 0x3f
 8002a8c:	d802      	bhi.n	8002a94 <HAL_RCC_ClockConfig+0x9c>
 8002a8e:	4b6b      	ldr	r3, [pc, #428]	@ (8002c3c <HAL_RCC_ClockConfig+0x244>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	e00f      	b.n	8002ab4 <HAL_RCC_ClockConfig+0xbc>
 8002a94:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a98:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a9c:	fa93 f3a3 	rbit	r3, r3
 8002aa0:	667b      	str	r3, [r7, #100]	@ 0x64
 8002aa2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002aa6:	663b      	str	r3, [r7, #96]	@ 0x60
 8002aa8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002aaa:	fa93 f3a3 	rbit	r3, r3
 8002aae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ab0:	4b62      	ldr	r3, [pc, #392]	@ (8002c3c <HAL_RCC_ClockConfig+0x244>)
 8002ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002ab8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002aba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002abc:	fa92 f2a2 	rbit	r2, r2
 8002ac0:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002ac2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002ac4:	fab2 f282 	clz	r2, r2
 8002ac8:	b2d2      	uxtb	r2, r2
 8002aca:	f042 0220 	orr.w	r2, r2, #32
 8002ace:	b2d2      	uxtb	r2, r2
 8002ad0:	f002 021f 	and.w	r2, r2, #31
 8002ad4:	2101      	movs	r1, #1
 8002ad6:	fa01 f202 	lsl.w	r2, r1, r2
 8002ada:	4013      	ands	r3, r2
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d171      	bne.n	8002bc4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e0ea      	b.n	8002cba <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d137      	bne.n	8002b5c <HAL_RCC_ClockConfig+0x164>
 8002aec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002af0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002af4:	fa93 f3a3 	rbit	r3, r3
 8002af8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002afa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002afc:	fab3 f383 	clz	r3, r3
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b3f      	cmp	r3, #63	@ 0x3f
 8002b04:	d802      	bhi.n	8002b0c <HAL_RCC_ClockConfig+0x114>
 8002b06:	4b4d      	ldr	r3, [pc, #308]	@ (8002c3c <HAL_RCC_ClockConfig+0x244>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	e00f      	b.n	8002b2c <HAL_RCC_ClockConfig+0x134>
 8002b0c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b10:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b14:	fa93 f3a3 	rbit	r3, r3
 8002b18:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b1a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b1e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b22:	fa93 f3a3 	rbit	r3, r3
 8002b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b28:	4b44      	ldr	r3, [pc, #272]	@ (8002c3c <HAL_RCC_ClockConfig+0x244>)
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b2c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b30:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002b32:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002b34:	fa92 f2a2 	rbit	r2, r2
 8002b38:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002b3a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002b3c:	fab2 f282 	clz	r2, r2
 8002b40:	b2d2      	uxtb	r2, r2
 8002b42:	f042 0220 	orr.w	r2, r2, #32
 8002b46:	b2d2      	uxtb	r2, r2
 8002b48:	f002 021f 	and.w	r2, r2, #31
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b52:	4013      	ands	r3, r2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d135      	bne.n	8002bc4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e0ae      	b.n	8002cba <HAL_RCC_ClockConfig+0x2c2>
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b62:	fa93 f3a3 	rbit	r3, r3
 8002b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b6a:	fab3 f383 	clz	r3, r3
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	2b3f      	cmp	r3, #63	@ 0x3f
 8002b72:	d802      	bhi.n	8002b7a <HAL_RCC_ClockConfig+0x182>
 8002b74:	4b31      	ldr	r3, [pc, #196]	@ (8002c3c <HAL_RCC_ClockConfig+0x244>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	e00d      	b.n	8002b96 <HAL_RCC_ClockConfig+0x19e>
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b80:	fa93 f3a3 	rbit	r3, r3
 8002b84:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b86:	2302      	movs	r3, #2
 8002b88:	623b      	str	r3, [r7, #32]
 8002b8a:	6a3b      	ldr	r3, [r7, #32]
 8002b8c:	fa93 f3a3 	rbit	r3, r3
 8002b90:	61fb      	str	r3, [r7, #28]
 8002b92:	4b2a      	ldr	r3, [pc, #168]	@ (8002c3c <HAL_RCC_ClockConfig+0x244>)
 8002b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b96:	2202      	movs	r2, #2
 8002b98:	61ba      	str	r2, [r7, #24]
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	fa92 f2a2 	rbit	r2, r2
 8002ba0:	617a      	str	r2, [r7, #20]
  return result;
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	fab2 f282 	clz	r2, r2
 8002ba8:	b2d2      	uxtb	r2, r2
 8002baa:	f042 0220 	orr.w	r2, r2, #32
 8002bae:	b2d2      	uxtb	r2, r2
 8002bb0:	f002 021f 	and.w	r2, r2, #31
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8002bba:	4013      	ands	r3, r2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d101      	bne.n	8002bc4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e07a      	b.n	8002cba <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bc4:	4b1d      	ldr	r3, [pc, #116]	@ (8002c3c <HAL_RCC_ClockConfig+0x244>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f023 0203 	bic.w	r2, r3, #3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	491a      	ldr	r1, [pc, #104]	@ (8002c3c <HAL_RCC_ClockConfig+0x244>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bd6:	f7fd fd95 	bl	8000704 <HAL_GetTick>
 8002bda:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bdc:	e00a      	b.n	8002bf4 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bde:	f7fd fd91 	bl	8000704 <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d901      	bls.n	8002bf4 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e062      	b.n	8002cba <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bf4:	4b11      	ldr	r3, [pc, #68]	@ (8002c3c <HAL_RCC_ClockConfig+0x244>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f003 020c 	and.w	r2, r3, #12
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d1eb      	bne.n	8002bde <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c06:	4b0c      	ldr	r3, [pc, #48]	@ (8002c38 <HAL_RCC_ClockConfig+0x240>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0307 	and.w	r3, r3, #7
 8002c0e:	683a      	ldr	r2, [r7, #0]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d215      	bcs.n	8002c40 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c14:	4b08      	ldr	r3, [pc, #32]	@ (8002c38 <HAL_RCC_ClockConfig+0x240>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f023 0207 	bic.w	r2, r3, #7
 8002c1c:	4906      	ldr	r1, [pc, #24]	@ (8002c38 <HAL_RCC_ClockConfig+0x240>)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c24:	4b04      	ldr	r3, [pc, #16]	@ (8002c38 <HAL_RCC_ClockConfig+0x240>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0307 	and.w	r3, r3, #7
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d006      	beq.n	8002c40 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e041      	b.n	8002cba <HAL_RCC_ClockConfig+0x2c2>
 8002c36:	bf00      	nop
 8002c38:	40022000 	.word	0x40022000
 8002c3c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0304 	and.w	r3, r3, #4
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d008      	beq.n	8002c5e <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c4c:	4b1d      	ldr	r3, [pc, #116]	@ (8002cc4 <HAL_RCC_ClockConfig+0x2cc>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	491a      	ldr	r1, [pc, #104]	@ (8002cc4 <HAL_RCC_ClockConfig+0x2cc>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0308 	and.w	r3, r3, #8
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d009      	beq.n	8002c7e <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c6a:	4b16      	ldr	r3, [pc, #88]	@ (8002cc4 <HAL_RCC_ClockConfig+0x2cc>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	4912      	ldr	r1, [pc, #72]	@ (8002cc4 <HAL_RCC_ClockConfig+0x2cc>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002c7e:	f000 f829 	bl	8002cd4 <HAL_RCC_GetSysClockFreq>
 8002c82:	4601      	mov	r1, r0
 8002c84:	4b0f      	ldr	r3, [pc, #60]	@ (8002cc4 <HAL_RCC_ClockConfig+0x2cc>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c8c:	22f0      	movs	r2, #240	@ 0xf0
 8002c8e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c90:	693a      	ldr	r2, [r7, #16]
 8002c92:	fa92 f2a2 	rbit	r2, r2
 8002c96:	60fa      	str	r2, [r7, #12]
  return result;
 8002c98:	68fa      	ldr	r2, [r7, #12]
 8002c9a:	fab2 f282 	clz	r2, r2
 8002c9e:	b2d2      	uxtb	r2, r2
 8002ca0:	40d3      	lsrs	r3, r2
 8002ca2:	4a09      	ldr	r2, [pc, #36]	@ (8002cc8 <HAL_RCC_ClockConfig+0x2d0>)
 8002ca4:	5cd3      	ldrb	r3, [r2, r3]
 8002ca6:	fa21 f303 	lsr.w	r3, r1, r3
 8002caa:	4a08      	ldr	r2, [pc, #32]	@ (8002ccc <HAL_RCC_ClockConfig+0x2d4>)
 8002cac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002cae:	4b08      	ldr	r3, [pc, #32]	@ (8002cd0 <HAL_RCC_ClockConfig+0x2d8>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7fd fce2 	bl	800067c <HAL_InitTick>
  
  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3778      	adds	r7, #120	@ 0x78
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	08002df8 	.word	0x08002df8
 8002ccc:	20000000 	.word	0x20000000
 8002cd0:	20000004 	.word	0x20000004

08002cd4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b087      	sub	sp, #28
 8002cd8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	60fb      	str	r3, [r7, #12]
 8002cde:	2300      	movs	r3, #0
 8002ce0:	60bb      	str	r3, [r7, #8]
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	617b      	str	r3, [r7, #20]
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002cea:	2300      	movs	r3, #0
 8002cec:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002cee:	4b1e      	ldr	r3, [pc, #120]	@ (8002d68 <HAL_RCC_GetSysClockFreq+0x94>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f003 030c 	and.w	r3, r3, #12
 8002cfa:	2b04      	cmp	r3, #4
 8002cfc:	d002      	beq.n	8002d04 <HAL_RCC_GetSysClockFreq+0x30>
 8002cfe:	2b08      	cmp	r3, #8
 8002d00:	d003      	beq.n	8002d0a <HAL_RCC_GetSysClockFreq+0x36>
 8002d02:	e026      	b.n	8002d52 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d04:	4b19      	ldr	r3, [pc, #100]	@ (8002d6c <HAL_RCC_GetSysClockFreq+0x98>)
 8002d06:	613b      	str	r3, [r7, #16]
      break;
 8002d08:	e026      	b.n	8002d58 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	0c9b      	lsrs	r3, r3, #18
 8002d0e:	f003 030f 	and.w	r3, r3, #15
 8002d12:	4a17      	ldr	r2, [pc, #92]	@ (8002d70 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002d14:	5cd3      	ldrb	r3, [r2, r3]
 8002d16:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002d18:	4b13      	ldr	r3, [pc, #76]	@ (8002d68 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d1c:	f003 030f 	and.w	r3, r3, #15
 8002d20:	4a14      	ldr	r2, [pc, #80]	@ (8002d74 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002d22:	5cd3      	ldrb	r3, [r2, r3]
 8002d24:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d008      	beq.n	8002d42 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d30:	4a0e      	ldr	r2, [pc, #56]	@ (8002d6c <HAL_RCC_GetSysClockFreq+0x98>)
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	fb02 f303 	mul.w	r3, r2, r3
 8002d3e:	617b      	str	r3, [r7, #20]
 8002d40:	e004      	b.n	8002d4c <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a0c      	ldr	r2, [pc, #48]	@ (8002d78 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d46:	fb02 f303 	mul.w	r3, r2, r3
 8002d4a:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	613b      	str	r3, [r7, #16]
      break;
 8002d50:	e002      	b.n	8002d58 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d52:	4b06      	ldr	r3, [pc, #24]	@ (8002d6c <HAL_RCC_GetSysClockFreq+0x98>)
 8002d54:	613b      	str	r3, [r7, #16]
      break;
 8002d56:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d58:	693b      	ldr	r3, [r7, #16]
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	371c      	adds	r7, #28
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	007a1200 	.word	0x007a1200
 8002d70:	08002e08 	.word	0x08002e08
 8002d74:	08002e18 	.word	0x08002e18
 8002d78:	003d0900 	.word	0x003d0900

08002d7c <memset>:
 8002d7c:	4402      	add	r2, r0
 8002d7e:	4603      	mov	r3, r0
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d100      	bne.n	8002d86 <memset+0xa>
 8002d84:	4770      	bx	lr
 8002d86:	f803 1b01 	strb.w	r1, [r3], #1
 8002d8a:	e7f9      	b.n	8002d80 <memset+0x4>

08002d8c <__libc_init_array>:
 8002d8c:	b570      	push	{r4, r5, r6, lr}
 8002d8e:	4d0d      	ldr	r5, [pc, #52]	@ (8002dc4 <__libc_init_array+0x38>)
 8002d90:	4c0d      	ldr	r4, [pc, #52]	@ (8002dc8 <__libc_init_array+0x3c>)
 8002d92:	1b64      	subs	r4, r4, r5
 8002d94:	10a4      	asrs	r4, r4, #2
 8002d96:	2600      	movs	r6, #0
 8002d98:	42a6      	cmp	r6, r4
 8002d9a:	d109      	bne.n	8002db0 <__libc_init_array+0x24>
 8002d9c:	4d0b      	ldr	r5, [pc, #44]	@ (8002dcc <__libc_init_array+0x40>)
 8002d9e:	4c0c      	ldr	r4, [pc, #48]	@ (8002dd0 <__libc_init_array+0x44>)
 8002da0:	f000 f818 	bl	8002dd4 <_init>
 8002da4:	1b64      	subs	r4, r4, r5
 8002da6:	10a4      	asrs	r4, r4, #2
 8002da8:	2600      	movs	r6, #0
 8002daa:	42a6      	cmp	r6, r4
 8002dac:	d105      	bne.n	8002dba <__libc_init_array+0x2e>
 8002dae:	bd70      	pop	{r4, r5, r6, pc}
 8002db0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002db4:	4798      	blx	r3
 8002db6:	3601      	adds	r6, #1
 8002db8:	e7ee      	b.n	8002d98 <__libc_init_array+0xc>
 8002dba:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dbe:	4798      	blx	r3
 8002dc0:	3601      	adds	r6, #1
 8002dc2:	e7f2      	b.n	8002daa <__libc_init_array+0x1e>
 8002dc4:	08002e28 	.word	0x08002e28
 8002dc8:	08002e28 	.word	0x08002e28
 8002dcc:	08002e28 	.word	0x08002e28
 8002dd0:	08002e2c 	.word	0x08002e2c

08002dd4 <_init>:
 8002dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dd6:	bf00      	nop
 8002dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dda:	bc08      	pop	{r3}
 8002ddc:	469e      	mov	lr, r3
 8002dde:	4770      	bx	lr

08002de0 <_fini>:
 8002de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002de2:	bf00      	nop
 8002de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002de6:	bc08      	pop	{r3}
 8002de8:	469e      	mov	lr, r3
 8002dea:	4770      	bx	lr
